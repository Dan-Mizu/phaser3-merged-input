{"version":3,"sources":["webpack://MergedInput/webpack/universalModuleDefinition","webpack://MergedInput/webpack/bootstrap","webpack://MergedInput/./main.js","webpack://MergedInput/./configs/bearings.js","webpack://MergedInput/./controlManager.js","webpack://MergedInput/./configs/pad_generic.js","webpack://MergedInput/./configs/pad_unlicensedSNES.js","webpack://MergedInput/./configs/pad_xbox360.js","webpack://MergedInput/./configs/pad_dualshock.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","m","MergedInput","Phaser","Plugins","ScenePlugin","_this2","this","eventEmitter","systems","events","game","on","Core","Events","PRE_STEP","preupdate","POST_STEP","postupdate","BLUR","loseFocus","input","gamepad","thisGamepad","refreshGamepads","setupGamepad","refreshPads","total","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","gamepads","Symbol","iterator","next","done","value","emit","err","return","gamepadButtonDown","gamepadButtonUp","keyboard","keyboardKeyDown","keyboardKeyUp","mouse","disableContextMenu","pointer","pointerMove","pointerDown","pointerUp","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","players","thisPlayer","BEARING","BEARING_DEGREES","ANGLE","direction","mapDirectionsToBearing","BEARING_LAST","DEGREES","parseFloat","mapBearingToDegrees","DEGREES_LAST","direction_secondary","checkKeyboardInput","checkGamepadInput","checkPointerInput","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","clearBuffer","interaction","pressed","length","internal","fakedpadPressed","buffer","interaction_mapped","fakedpadReleased","released","thisKey","keys","reset","device","id","player","index","action","addPlayer","gamepadID","toLowerCase","mappedPad","controlManager","mapGamepad","thisButton","gamepadMapping","gamepadType","padType","buttons_mapped","filter","el","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","entries","_step4$value","_slicedToArray","fakedpad","buttons","numberOfButtons","_typeof","Number","isInteger","newPlayer","setupControls","addPlayerHelperFunctions","push","isPressed","button","matchedButtons","Array","x","includes","isReleased","key","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","actions","apply","_toConsumableArray","Object","buttonID","toString","replace","find","arguments","append","getPlayerActions","addKey","Input","Keyboard","KeyCodes","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","thisValue","isDown","TIMESTAMP","scene","sys","time","now","event","keyCode","playerIndex","getPlayerIndexFromKey","playerAction","getPlayerButtonFromKey","getPlayer","state","last","lastPressed","dpadMappings","mappedButton","getMappedButton","lastReleased","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","pad","dpadMapping","fakedpadBuffer","Gamepad","Button","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","leftStick","y","UP","Math","abs","gamepadFakeDPadPress","DOWN","up","down","LEFT","RIGHT","left","right","gamepadFakeDPadRelease","rightStick","b","threshold","distance","pointerDirection","getBearingFromAngle","angle","position","angleToPointer","Angle","Between","worldX","worldY","pointerAngle","leftButtonDown","rightButtonDown","middleButtonDown","backButtonDown","forwardButtonDown","moveTime","leftButtonReleased","rightButtonReleased","middleButtonReleased","backButtonReleased","forwardButtonReleased","numDirections","snap_interval","PI2","angleSnap","Snap","To","angleSnapDeg","RadToDeg","bearings","bearing","thisDirection","toUpperCase","directions","_this3","shutdown","debug","i","axes","a","axis","getValue","ID","Index","Buttons","Axes","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_debug$players$push","_defineProperty","pluginManager","_classCallCheck","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","-180","-168.75","-157.5","-146.25","-135","-123.75","-112.5","-101.25","-90","-78.75","-67.5","-56.25","-45","-33.75","-22.5","-11.25","0","11.25","22.5","33.75","45","56.25","67.5","78.75","90","101.25","112.5","123.75","135","146.25","157.5","168.75","180","padConfig","pad_generic","pad_unlicensedSNES","pad_xbox360","pad_dualshock","RC_S","RC_E","RC_W","RC_N","START","SELECT","LB","RB","LT","RT","LS","RS","LC_N","LC_S","LC_W","LC_E","MENU","M1","M2","M3","M4","M5","controls","getBaseControls","padID","TOUCH","c","d","name","getter","o","defineProperty","enumerable","get","r","toStringTag","t","mode","__esModule","ns","create","bind","n","object","property","prototype","hasOwnProperty","p","s","moduleId","l","modules"],"mappings":"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","file":"MergedInput.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"MergedInput\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MergedInput\"] = factory();\n\telse\n\t\troot[\"MergedInput\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import bearings from './configs/bearings'\r\nimport controlManager from './controlManager'\r\n\r\nexport default class MergedInput extends Phaser.Plugins.ScenePlugin {\r\n\r\n\t/**\r\n\t * The Merged Input plugin is designed to run in the background and handle input.\r\n\t * Upon detecting a keypress or gamepad interaction, the plugin will update a player object and emit global events.\r\n\t *\r\n\t * @extends Phaser.Plugins.ScenePlugin\r\n\t * @param {*} scene\r\n\t * @param {*} pluginManager\r\n\t */\r\n\tconstructor(scene, pluginManager) {\r\n\t\tsuper(scene, pluginManager);\r\n\t\tthis.scene = scene;\r\n\r\n\t\t// Players\r\n\t\tthis.players = [];\r\n\t\t// Gamepads\r\n\t\tthis.gamepads = [];\r\n\t\t// Keys object to store Phaser key objects. We'll check these during update\r\n\t\tthis.keys = {};\r\n\r\n\t\tthis.bearings = bearings;\r\n\r\n\t\tthis.dpadMappings = {\r\n\t\t\t'UP': 12,\r\n\t\t\t'DOWN': 13,\r\n\t\t\t'LEFT': 14,\r\n\t\t\t'RIGHT': 15\r\n\t\t}\r\n\r\n\t\tthis.controlManager = new controlManager()\r\n\t}\r\n\r\n\tboot() {\r\n\t\tthis.eventEmitter = this.systems.events;\r\n\t\tthis.game.events.on(Phaser.Core.Events.PRE_STEP, this.preupdate, this);\r\n\t\tthis.game.events.on(Phaser.Core.Events.POST_STEP, this.postupdate, this);\r\n\t\t// Handle the game losing focus\r\n\t\tthis.game.events.on(Phaser.Core.Events.BLUR, () => {\r\n\t\t\tthis.loseFocus()\r\n\t\t})\r\n\r\n\t\t// Gamepad\r\n\t\tif (typeof this.systems.input.gamepad !== 'undefined') {\r\n\t\t\tthis.systems.input.gamepad.on('connected', function (thisGamepad) {\r\n\t\t\t\tthis.refreshGamepads();\r\n\t\t\t\tthis.setupGamepad(thisGamepad)\r\n\t\t\t}, this);\r\n\r\n\t\t\t// Check to see if the gamepad has already been setup by the browser\r\n\t\t\tthis.systems.input.gamepad.refreshPads();\r\n\t\t\tif (this.systems.input.gamepad.total) {\r\n\t\t\t\tthis.refreshGamepads();\r\n\t\t\t\tfor (const thisGamepad of this.gamepads) {\r\n\t\t\t\t\tthis.systems.input.gamepad.emit('connected', thisGamepad);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.systems.input.gamepad.on('down', this.gamepadButtonDown, this);\r\n\t\t\tthis.systems.input.gamepad.on('up', this.gamepadButtonUp, this);\r\n\t\t}\r\n\r\n\t\t// Keyboard\r\n\t\tthis.systems.input.keyboard.on('keydown', this.keyboardKeyDown, this);\r\n\t\tthis.systems.input.keyboard.on('keyup', this.keyboardKeyUp, this);\r\n\r\n\r\n\t\t// Pointer\r\n\t\tthis.systems.input.mouse.disableContextMenu();\r\n\r\n\t\tthis.systems.input.on('pointermove', function (pointer) {\r\n\t\t\tthis.pointerMove(pointer);\r\n\t\t}, this);\r\n\r\n\t\tthis.systems.input.on('pointerdown', function (pointer) {\r\n\t\t\tthis.pointerDown(pointer);\r\n\t\t}, this);\r\n\r\n\t\tthis.systems.input.on('pointerup', function (pointer) {\r\n\t\t\tthis.pointerUp(pointer);\r\n\t\t}, this);\r\n\t}\r\n\r\n\tpreupdate() {\r\n\t\t// Loop through players and handle input\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// If the pointer hasn't moved, and the scene has changed, this can end up as undefined\r\n\t\t\tthisPlayer.pointer.BEARING = typeof thisPlayer.pointer.BEARING != 'undefined' ? thisPlayer.pointer.BEARING : '';\r\n\t\t\tthisPlayer.pointer.BEARING_DEGREES = typeof thisPlayer.pointer.BEARING_DEGREES != 'undefined' ? thisPlayer.pointer.BEARING_DEGREES : 0;\r\n\t\t\tthisPlayer.pointer.ANGLE = typeof thisPlayer.pointer.ANGLE != 'undefined' ? thisPlayer.pointer.ANGLE : '';\r\n\r\n\r\n\t\t\tthisPlayer.direction.BEARING = this.mapDirectionsToBearing(thisPlayer.direction);\r\n\t\t\tthisPlayer.direction.BEARING_LAST = thisPlayer.direction.BEARING != '' ? thisPlayer.direction.BEARING : thisPlayer.direction.BEARING_LAST;\r\n\t\t\tthisPlayer.direction.DEGREES = thisPlayer.direction.BEARING != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction.BEARING)) : 0;\r\n\t\t\tthisPlayer.direction.DEGREES_LAST = thisPlayer.direction.BEARING_LAST != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction.BEARING_LAST)) : 0;\r\n\t\t\tthisPlayer.direction_secondary.BEARING = this.mapDirectionsToBearing(thisPlayer.direction_secondary);\r\n\t\t\tthisPlayer.direction_secondary.BEARING_LAST = thisPlayer.direction_secondary.BEARING != '' ? thisPlayer.direction_secondary.BEARING : thisPlayer.direction_secondary.BEARING_LAST;\r\n\t\t\tthisPlayer.direction_secondary.DEGREES = thisPlayer.direction_secondary.BEARING != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction_secondary.BEARING)) : 0;\r\n\t\t\tthisPlayer.direction_secondary.DEGREES_LAST = thisPlayer.direction_secondary.BEARING_LAST != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction_secondary.BEARING_LAST)) : 0;\r\n\t\t}\r\n\r\n\t\tthis.checkKeyboardInput();\r\n\t\tthis.checkGamepadInput();\r\n\t\tthis.checkPointerInput();\r\n\t}\r\n\r\n\tpostupdate() {\r\n\t\t// Loop through players and manage buffered input\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Clear the interaction buffer\r\n\t\t\tthis.clearBuffer(thisPlayer);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clear the interaction buffer for the given player\r\n\t * In the case of 'fake' DPad presses, we're using some convoluted buffers to keep the 'pressed' and 'released' values around for an extra tick\r\n\t * As they're created in this update loop, they're otherwise cleared before the consumer can use them.\r\n\t * @param {*} thisPlayer \r\n\t */\r\n\tclearBuffer(thisPlayer) {\r\n\t\tif (thisPlayer.interaction.pressed.length > 0 && thisPlayer.internal.fakedpadPressed.length == 0) {\r\n\t\t\tthisPlayer.interaction.buffer = [];\r\n\t\t}\r\n\t\tif (thisPlayer.interaction.buffer.length == 0) {\r\n\t\t\tthisPlayer.interaction.pressed = [];\r\n\t\t\tthisPlayer.interaction_mapped.pressed = [];\r\n\t\t\tif (thisPlayer.internal.fakedpadReleased.length == 0) {\r\n\t\t\t\tthisPlayer.interaction.released = [];\r\n\t\t\t\tthisPlayer.interaction_mapped.released = [];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthisPlayer.internal.fakedpadPressed = [];\r\n\t\tthisPlayer.internal.fakedpadReleased = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Function to run when the game loses focus\r\n\t * We want to fake releasing the buttons here, so that they're not stuck down without an off event when focus returns to the game\r\n\t */\r\n\tloseFocus() {\r\n\t\t// Loop through defined keys and reset them\r\n\t\tfor (let thisKey in this.keys) {\r\n\t\t\tthis.keys[thisKey].reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set up the gamepad and associate with a player object\r\n\t */\r\n\tsetupGamepad(thisGamepad) {\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', id: thisGamepad.id, player: thisGamepad.index, action: 'Connected' });\r\n\r\n\t\tif (typeof this.players[thisGamepad.index] === 'undefined') {\r\n\t\t\tthis.addPlayer();\r\n\t\t}\r\n\t\t\r\n\t\tlet gamepadID = thisGamepad.id.toLowerCase();\r\n\t\tthis.players[thisGamepad.index].gamepad = thisGamepad;\r\n\r\n\t\t// Map the gamepad buttons\r\n\t\tlet mappedPad = this.controlManager.mapGamepad(gamepadID);\r\n\t\tthis.players[thisGamepad.index].gamepadMapping = mappedPad.gamepadMapping;\r\n\t\tthis.players[thisGamepad.index].interaction_mapped.gamepadType = mappedPad.padType;\r\n\t\tfor (let thisButton in this.players[thisGamepad.index].gamepadMapping) {\r\n\t\t\tthis.players[thisGamepad.index].buttons_mapped[thisButton] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trefreshGamepads() {\r\n\t\t// Sometimes, gamepads are undefined. For some reason.\r\n\t\tthis.gamepads = this.systems.input.gamepad.gamepads.filter(function (el) {\r\n\t\t\treturn el != null;\r\n\t\t});\r\n\r\n\t\tfor (const [index, thisGamepad] of this.gamepads.entries()) {\r\n\t\t\tthisGamepad.index = index; // Overwrite the gamepad index, in case we had undefined gamepads earlier\r\n\r\n\t\t\t/**\r\n\t\t\t * Some cheap gamepads use the first axis as a dpad, in which case we won't have the dpad buttons 12-15\r\n\t\t\t */\r\n\t\t\tthisGamepad.fakedpad = thisGamepad.buttons.length < 15;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add a new player object to the players array\r\n\t * @param {number} index Player index - if a player object at this index already exists, it will be returned instead of creating a new player object\r\n\t * @param {number} numberOfButtons The number of buttons to assign to the player object. Defaults to 16. Fewer than 16 is not recommended, as gamepad DPads typically map to buttons 12-15\r\n\t */\r\n\taddPlayer(index, numberOfButtons) {\r\n\t\tnumberOfButtons = numberOfButtons || 16;\r\n\t\tif (typeof Number.isInteger(index) && typeof this.players[index] !== 'undefined') {\r\n\t\t\treturn this.players[index];\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Set up player object\r\n\t\t\tlet newPlayer = this.controlManager.setupControls(numberOfButtons);\r\n\r\n\t\t\t// Add helper functions to the player object\r\n\t\t\tthis.addPlayerHelperFunctions(newPlayer);\r\n\r\n\t\t\t// Push new player to players array\r\n\t\t\tthis.players.push(newPlayer);\r\n\r\n\t\t\tthis.players[this.players.length - 1].index = this.players.length - 1;\r\n\t\t\treturn this.players[this.players.length - 1];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add helper functions to the player object\r\n\t * @param {*} player \r\n\t */\r\n\taddPlayerHelperFunctions(player) {\r\n\t\t/**\r\n\t\t * Pass a button name, or an array of button names to check if any were pressed in this update step.\r\n\t\t * Returns the name of the matched button(s), in case you need it.\r\n\t\t */\r\n\t\tplayer.interaction.isPressed = (button) => {\r\n\t\t\tbutton = (typeof button === 'string') ? Array(button) : button;\r\n\t\t\tlet matchedButtons = button.filter(x => player.interaction.pressed.includes(x))\r\n\t\t\treturn matchedButtons.length ? matchedButtons : false;\r\n\t\t},\r\n\t\t/**\r\n\t\t * Pass a button name, or an array of button names to check if any were released in this update step.\r\n\t\t * Returns the name of the matched button(s), in case you need it.\r\n\t\t */\r\n\t\tplayer.interaction.isReleased = (button) => {\r\n\t\t\tbutton = (typeof button === 'string') ? Array(button) : button;\r\n\t\t\tlet matchedButtons = button.filter(x => player.interaction.released.includes(x))\r\n\t\t\treturn matchedButtons.length ? matchedButtons : false;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Pass a mapped button name, or an array of mapped button names to check if any were pressed in this update step.\r\n\t\t * Returns the name of the matched mapped button(s), in case you need it.\r\n\t\t */\r\n\t\tplayer.interaction_mapped.isPressed = (button) => {\r\n\t\t\tbutton = (typeof button === 'string') ? Array(button) : button;\r\n\t\t\tlet matchedButtons = button.filter(x => player.interaction_mapped.pressed.includes(x))\r\n\t\t\treturn matchedButtons.length ? matchedButtons : false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Pass a mapped button name, or an array of mapped button names to check if any were released in this update step.\r\n\t\t * Returns the name of the matched mapped button(s), in case you need it.\r\n\t\t */\r\n\t\tplayer.interaction_mapped.isReleased = (button) => {\r\n\t\t\tbutton = (typeof button === 'string') ? Array(button) : button;\r\n\t\t\tlet matchedButtons = button.filter(x => player.interaction_mapped.released.includes(x))\r\n\t\t\treturn matchedButtons.length ? matchedButtons : false;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Get player object\r\n\t * @param {number} index Player index\r\n\t */\r\n\tgetPlayer(index) {\r\n\t\treturn typeof this.players[index] !== 'undefined' ? this.players[index] : ''\r\n\t}\r\n\r\n\tgetPlayerIndexFromKey(key) {\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\tif (thisValue == key) {\r\n\t\t\t\t\t\treturn thisPlayer.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tgetPlayerButtonFromKey(key) {\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\tif (thisValue == key) {\r\n\t\t\t\t\t\t// Now we have a matching button value, check to see if it's in our mapped buttons, in which case we want to return the button number it matches to\r\n\t\t\t\t\t\tif (typeof thisPlayer.gamepadMapping[thisKey] !== \"undefined\") {\r\n\t\t\t\t\t\t\treturn 'B' + thisPlayer.gamepadMapping[thisKey];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\treturn thisKey;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Return an array of actions that a player may use\r\n\t * @param {number} player \r\n\t * @returns \r\n\t */\r\n\tgetPlayerActions(player) {\r\n\t\tlet actions = ['UP', 'DOWN', 'LEFT', 'RIGHT', 'ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT'];\r\n\t\tactions.push(...Object.keys(this.players[player].gamepadMapping));\r\n\t\tactions.push(...Object.keys(this.players[player].buttons));\r\n\r\n\t\treturn actions;\r\n\t}\r\n\r\n\t/**\r\n\t * Given a player and a button ID, return the mapped button name, e.g. 0 = 'RC_S' (Right cluster, South - X on an xbox gamepad)\r\n\t * @param {*} player \r\n\t * @param {*} buttonID \r\n\t */\r\n\tgetMappedButton(player, buttonID) {\r\n\t\tbuttonID = buttonID.toString().replace(/\\D/g, '');\r\n\t\treturn Object.keys(player.gamepadMapping).find(key => player.gamepadMapping[key] == buttonID);\r\n\t}\r\n\r\n\t// Keyboard functions\r\n\r\n\t/**\r\n\t * Define a key for a player/action combination\r\n\t * @param {number} player The player on which we're defining a key\r\n\t * @param {string} action The action to define\r\n\t * @param {string} value The key to use\r\n\t * @param {boolean} append When true, this key definition will be appended to the existing key(s) for this action\r\n\t */\r\n\tdefineKey(player = 0, action, value, append = false) {\r\n\t\t// Set up a new player if none defined\r\n\t\tif (typeof this.players[player] === 'undefined') {\r\n\t\t\tthis.addPlayer();\r\n\t\t}\r\n\r\n\t\tif (this.getPlayerActions(player).includes(action)) {\r\n\t\t\tif (append && (typeof this.players[player].keys[action] !== 'undefined')) {\r\n\t\t\t\tthis.players[player].keys[action].push([value]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[player].keys[action] = [];\r\n\t\t\t\tthis.players[player].keys[action].push([value]);\r\n\t\t\t}\r\n\r\n\t\t\tthis.keys[[value]] = this.systems.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes[value]);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Iterate through players and check for interaction with defined keys\r\n\t */\r\n\tcheckKeyboardInput() {\r\n\t\t// Loop through players and check for keypresses\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tlet action = 0;\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\t// Check if the key is down\r\n\t\t\t\t\taction = (this.keys[thisValue].isDown) ? 1 : action;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set the action in the player object\r\n\r\n\t\t\t\t// Dpad\r\n\t\t\t\tif (['UP', 'DOWN', 'LEFT', 'RIGHT'].includes(thisKey)) {\r\n\t\t\t\t\tthisPlayer.direction[thisKey] = action;\r\n\t\t\t\t\tthisPlayer.direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t}\r\n\t\t\t\t// Alternative direction\r\n\t\t\t\telse if (['ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT'].includes(thisKey)) {\r\n\t\t\t\t\tthisPlayer.direction_secondary[thisKey.replace('ALT_', '')] = action;\r\n\t\t\t\t\tif (action == 1) {\r\n\t\t\t\t\t\tthisPlayer.direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Friendly button names\r\n\t\t\t\telse if (thisKey in thisPlayer.gamepadMapping) {\r\n\t\t\t\t\t// Get the button number from the gamepad mapping\r\n\t\t\t\t\tthisPlayer.buttons['B' + thisPlayer.gamepadMapping[thisKey]] = action;\r\n\t\t\t\t\tthisPlayer.buttons_mapped[thisKey] = action;\r\n\t\t\t\t\tif (action == 1) {\r\n\t\t\t\t\t\tthisPlayer.buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Numbered buttons\r\n\t\t\t\telse {\r\n\t\t\t\t\tthisPlayer.buttons[thisKey] = action;\r\n\t\t\t\t\tif (action == 1) {\r\n\t\t\t\t\t\tthisPlayer.buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set the latest interaction flag\r\n\t\t\t\tif (action == 1) {\r\n\t\t\t\t\tthisPlayer.interaction.device = 'keyboard';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a keyboard button is pressed down, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the key, and passes a mapped action and value\r\n\t */\r\n\tkeyboardKeyDown(event) {\r\n\t\tlet keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\r\n\t\tlet playerIndex = this.getPlayerIndexFromKey(keyCode);\r\n\t\tlet playerAction = this.getPlayerButtonFromKey(keyCode);\r\n\r\n\t\tif (playerIndex > -1 && playerAction != '') {\r\n\t\t\tlet thisPlayer = this.getPlayer(playerIndex);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'keyboard', value: 1, player: playerIndex, action: keyCode, state: 'DOWN' });\r\n\r\n\t\t\tthisPlayer.interaction.device = 'keyboard';\r\n\t\t\tthisPlayer.interaction.pressed.push(playerAction);\r\n\t\t\tthisPlayer.interaction.buffer.push(playerAction);\r\n\t\t\tthisPlayer.interaction.last = playerAction;\r\n\t\t\tthisPlayer.interaction.lastPressed = playerAction;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tif (typeof this.dpadMappings[playerAction] !== \"undefined\") {\r\n\t\t\t\tplayerAction = 'B' + this.dpadMappings[playerAction];\r\n\t\t\t}\r\n\t\t\tif (typeof thisPlayer.buttons[playerAction] !== \"undefined\") {\r\n\t\t\t\tlet mappedButton = this.getMappedButton(thisPlayer, playerAction);\r\n\t\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\t\tthisPlayer.buttons_mapped[mappedButton] = 1;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.pressed.push(mappedButton);\r\n\t\t\t\t\tthisPlayer.interaction_mapped.last = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.lastPressed = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.gamepadType = 'keyboard';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a keyboard button is released, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the key, and passes a mapped action and value\r\n\t */\r\n\tkeyboardKeyUp(event) {\r\n\t\tlet keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\r\n\t\tlet playerIndex = this.getPlayerIndexFromKey(keyCode);\r\n\t\tlet playerAction = this.getPlayerButtonFromKey(keyCode);\r\n\r\n\t\tif (playerIndex > -1 && playerAction != '') {\r\n\t\t\tlet thisPlayer = this.getPlayer(playerIndex);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'keyboard', value: 1, player: playerIndex, action: keyCode, state: 'DOWN' });\r\n\r\n\t\t\tthisPlayer.interaction.device = 'keyboard';\r\n\t\t\tthisPlayer.interaction.released.push(playerAction);\r\n\t\t\tthisPlayer.interaction.lastReleased = playerAction;\r\n\t\t\t\r\n\t\t\t// Update mapped button object\r\n\t\t\tif (typeof this.dpadMappings[playerAction] !== \"undefined\") {\r\n\t\t\t\tplayerAction = 'B' + this.dpadMappings[playerAction];\r\n\t\t\t}\r\n\t\t\tif (typeof thisPlayer.buttons[playerAction] !== \"undefined\") {\r\n\t\t\t\tlet mappedButton = this.getMappedButton(thisPlayer, playerAction);\r\n\t\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\t\tthisPlayer.buttons_mapped[mappedButton] = 0;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.released = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.lastReleased = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.gamepadType = 'keyboard';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Iterate through players and check for interaction with defined pointer buttons\r\n\t */\r\n\tcheckPointerInput() {\r\n\t\t// Loop through players and check for button presses\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) { // Each definition for this key action\r\n\t\t\t\t\tif (['M1', 'M2', 'M3', 'M4', 'M5'].includes(thisValue[0])) {\r\n\t\t\t\t\t\t// Check to see if button is pressed (stored in P1, can't have two mice...)\r\n\t\t\t\t\t\tif (this.players[0].pointer[thisValue] == 1) {\r\n\t\t\t\t\t\t\tthisPlayer.buttons[thisKey] = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// Gamepad functions\r\n\r\n\t/**\r\n\t * When a gamepad button is pressed down, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\r\n\t * @param {number} index Button index\r\n\t * @param {number} value Button value\r\n\t * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\r\n\t */\r\n\tgamepadButtonDown(pad, button, value) {\r\n\t\tthis.players[pad.index].interaction.device = 'gamepad';\r\n\t\tthis.players[pad.index].buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: value, player: pad.index, action: 'B' + button.index, state: 'DOWN' });\r\n\r\n\t\t// Buttons\r\n\t\tif (![12, 13, 14, 15].includes(button.index)) {\r\n\t\t\t// Update the last button state\r\n\t\t\tthis.players[pad.index].interaction.pressed.push('B' + button.index);\r\n\t\t\tthis.players[pad.index].interaction.last = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.lastPressed = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.buffer.push('B' + button.index);\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.pressed.push(mappedButton);\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.last = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastPressed = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t\t// DPad\r\n\t\telse {\r\n\t\t\tlet dpadMapping = this.dpadMappings;\r\n\t\t\tlet direction = Object.keys(dpadMapping).find(key => dpadMapping[key] == button.index);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: direction, state: 'DOWN' });\r\n\t\t\tthis.players[pad.index].interaction.pressed.push(direction);\r\n\t\t\tthis.players[pad.index].interaction.last = direction;\r\n\t\t\tthis.players[pad.index].interaction.lastPressed = direction;\r\n\t\t\tthis.players[pad.index].interaction.buffer.push(direction);\r\n\t\t\tthis.players[pad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.pressed.push(mappedButton);\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.last = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastPressed = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a gamepad button is released, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\r\n\t * @param {number} index Button index\r\n\t * @param {number} value Button value\r\n\t * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\r\n\t */\r\n\tgamepadButtonUp(pad, button, value) {\r\n\t\tthis.players[pad.index].interaction.device = 'gamepad';\r\n\t\tthis.players[pad.index].buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: value, player: pad.index, action: 'B' + button.index, state: 'UP' });\r\n\r\n\t\t// Buttons\r\n\t\tif (![12, 13, 14, 15].includes(button.index)) {\r\n\t\t\t// Update the last button state\r\n\t\t\tthis.players[pad.index].interaction.released.push('B' + button.index);\r\n\t\t\tthis.players[pad.index].interaction.lastReleased = 'B' + button.index;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.released = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastReleased = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t\t// DPad\r\n\t\telse {\r\n\t\t\tlet dpadMapping = this.dpadMappings;\r\n\t\t\tlet direction = Object.keys(dpadMapping).find(key => dpadMapping[key] == button.index);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: direction, state: 'UP' });\r\n\t\t\tthis.players[pad.index].interaction.released.push(direction);\r\n\t\t\tthis.players[pad.index].interaction.lastReleased = direction;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.released = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastReleased = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Some gamepads map dpads to axis, which are handled differently to buttons.\r\n\t * This function mimics a gamepad push and fires an event.\r\n\t * We also insert the direction into a buffer so that we know what buttons are pressed in the gamepadFakeDPadRelease function\r\n\t * We use an array for the buffer and pressed vars, as more than one button may be pressed at the same time, within the same step.\r\n\t */\r\n\tgamepadFakeDPadPress(gamepad, direction) {\r\n\t\tif (!this.players[gamepad.index].internal.fakedpadBuffer.includes(direction)) {\r\n\t\t\tthis.players[gamepad.index].internal.fakedpadBuffer.push(direction);\r\n\t\t\tthis.players[gamepad.index].internal.fakedpadPressed.push(direction);\r\n\t\t\t\r\n\t\t\tlet thisButton = new Phaser.Input.Gamepad.Button(gamepad, this.dpadMappings[direction])\r\n\t\t\tthisButton.value = 1;\r\n\t\t\tthisButton.pressed = true;\r\n\t\t\tthisButton.events.emit('down', gamepad, thisButton, 1)\r\n\t\t\t// this.systems.input.gamepad.emit('down', gamepad, thisButton, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When the axis is blank, we know we've released all buttons.\r\n\t */\r\n\tgamepadFakeDPadRelease(gamepad) {\r\n\t\tif (this.players[gamepad.index].internal.fakedpadBuffer.length > 0) {\r\n\r\n\t\t\tfor (let direction of this.players[gamepad.index].internal.fakedpadBuffer) {\r\n\t\t\t\tthis.players[gamepad.index].internal.fakedpadReleased = direction;\r\n\t\r\n\t\t\t\tlet thisButton = new Phaser.Input.Gamepad.Button(gamepad, this.dpadMappings[direction])\r\n\t\t\t\tthisButton.value = 0;\r\n\t\t\t\tthisButton.pressed = false;\r\n\t\t\t\tthisButton.events.emit('up', gamepad, thisButton, 0)\r\n\t\t\t\t// this.systems.input.gamepad.emit('up', gamepad, thisButton, 0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.players[gamepad.index].internal.fakedpadBuffer = [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Iterate through gamepads and handle interactions\r\n\t */\r\n\tcheckGamepadInput() {\r\n\t\t// Check for gamepad input\r\n\t\tfor (var thisGamepad of this.gamepads) {\r\n\r\n\t\t\t// Set up a player if we don't have one, presumably due to race conditions in detecting gamepads\r\n\t\t\tif (typeof this.players[thisGamepad.index] === 'undefined') {\r\n\t\t\t\tthis.addPlayer();\r\n\t\t\t}\r\n\r\n\t\t\tlet direction = '';\r\n\r\n\t\t\t// Directions\r\n\t\t\tif (thisGamepad.leftStick.y < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.UP = Math.abs(thisGamepad.leftStick.y)\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'UP');\r\n\t\t\t\t\tdirection = 'UP'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.leftStick.y > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.DOWN = thisGamepad.leftStick.y\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'DOWN');\r\n\t\t\t\t\tdirection = 'DOWN'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// DPad\r\n\t\t\t\tthis.players[thisGamepad.index].direction.UP = thisGamepad.up ? 1 : 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction.DOWN = thisGamepad.down ? 1 : 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (thisGamepad.leftStick.x < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.LEFT = Math.abs(thisGamepad.leftStick.x)\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'LEFT');\r\n\t\t\t\t\tdirection = 'LEFT'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.leftStick.x > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.RIGHT = thisGamepad.leftStick.x\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'RIGHT');\r\n\t\t\t\t\tdirection = 'RIGHT'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// DPad\r\n\t\t\t\tthis.players[thisGamepad.index].direction.LEFT = thisGamepad.left ? 1 : 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction.RIGHT = thisGamepad.right ? 1 : 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (thisGamepad.fakedpad && direction == '') {\r\n\t\t\t\tthis.gamepadFakeDPadRelease(thisGamepad);\r\n\t\t\t}\r\n\r\n\t\t\t// Secondary\r\n\t\t\tif (thisGamepad.rightStick.y < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.UP = Math.abs(thisGamepad.rightStick.y)\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.rightStick.y > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.DOWN = thisGamepad.rightStick.y\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.UP = 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.DOWN = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (thisGamepad.rightStick.x < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.LEFT = Math.abs(thisGamepad.rightStick.x)\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.rightStick.x > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.RIGHT = thisGamepad.rightStick.x\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.LEFT = 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.RIGHT = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// Buttons\r\n\t\t\t\tfor (var b = 0; b < thisGamepad.buttons.length; b++) {\r\n\t\t\t\t\tlet button = thisGamepad.buttons[b];\r\n\t\t\t\t\tthis.players[thisGamepad.index].buttons['B' + b] = button.value;\r\n\r\n\t\t\t\t\t// Get mapped name for this button number and artificially update the relevant buttons_mapped key\r\n\t\t\t\t\tlet mappedButton = this.getMappedButton(this.players[thisGamepad.index], b);\r\n\t\t\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons_mapped[mappedButton] = button.value;\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer move.\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerMove(pointer, threshold) {\r\n\t\tthreshold = threshold || 0;\r\n\t\tif (pointer.distance > threshold) {\r\n\t\t\tlet pointerDirection = this.getBearingFromAngle(pointer.angle, 8);\r\n\r\n\t\t\t// If we've been given a player position, return bearings and angles\r\n\t\t\tif (typeof this.players[0] !== 'undefined' && this.players[0].position.x !== 'undefined') {\r\n\t\t\t\tlet position = this.players[0].position;\r\n\t\t\t\tlet angleToPointer = Phaser.Math.Angle.Between(position.x, position.y, pointer.worldX, pointer.worldY);\r\n\t\t\t\tpointerDirection = this.getBearingFromAngle(angleToPointer, 8);\r\n\t\t\t\tlet pointerAngle = Number(this.mapBearingToDegrees(pointerDirection));\r\n\r\n\t\t\t\tthis.players[0].pointer.BEARING = pointerDirection;\r\n\t\t\t\tthis.players[0].pointer.ANGLE = angleToPointer;\r\n\t\t\t\tthis.players[0].pointer.BEARING_DEGREES = pointerAngle;\r\n\t\t\t\tthis.players[0].pointer.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer down. Indicates that Mx has been pressed, which should be listened to by the player object\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerDown(pointer) {\r\n\t\tlet action = '';\r\n\t\tthis.players[0].interaction.device = 'pointer';\r\n\t\tif (pointer.leftButtonDown()) {\r\n\t\t\taction = 'M1';\r\n\t\t}\r\n\t\tif (pointer.rightButtonDown()) {\r\n\t\t\taction = 'M2';\r\n\t\t}\r\n\t\tif (pointer.middleButtonDown()) {\r\n\t\t\taction = 'M3';\r\n\t\t}\r\n\t\tif (pointer.backButtonDown()) {\r\n\t\t\taction = 'M4';\r\n\t\t}\r\n\t\tif (pointer.forwardButtonDown()) {\r\n\t\t\taction = 'M5';\r\n\t\t}\r\n\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'pointer', value: 1, player: 0, action: action, state: 'DOWN' });\r\n\r\n\t\tthis.players[0].pointer[action] = 1;\r\n\r\n\t\t// Update the last button state\r\n\t\tthis.players[0].interaction.pressed.push(action);\r\n\t\tthis.players[0].interaction.last = action;\r\n\t\tthis.players[0].interaction.lastPressed = action;\r\n\t\tthis.players[0].interaction.buffer.push(action);\r\n\t\tthis.players[0].pointer.TIMESTAMP = pointer.moveTime;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer up. Indicates that Mx has been released, which should be listened to by the player object\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerUp(pointer) {\r\n\t\tlet action = '';\r\n\t\tif (pointer.leftButtonReleased()) {\r\n\t\t\taction = 'M1';\r\n\t\t}\r\n\t\tif (pointer.rightButtonReleased()) {\r\n\t\t\taction = 'M2';\r\n\t\t}\r\n\t\tif (pointer.middleButtonReleased()) {\r\n\t\t\taction = 'M3';\r\n\t\t}\r\n\t\tif (pointer.backButtonReleased()) {\r\n\t\t\taction = 'M4';\r\n\t\t}\r\n\t\tif (pointer.forwardButtonReleased()) {\r\n\t\t\taction = 'M5';\r\n\t\t}\r\n\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'pointer', value: 1, player: 0, action: action, state: 'UP' });\r\n\r\n\t\tthis.players[0].pointer[action] = 0;\r\n\t\tthis.players[0].interaction.released.push(action);\r\n\t\tthis.players[0].interaction.lastReleased = action;\r\n\t\tthis.players[0].pointer.TIMESTAMP = this.scene.sys.time.now;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Get the bearing from a given angle\r\n\t * @param {float} angle - Angle to use\r\n\t * @param {number} numDirections - Number of possible directions (e.g. 4 for N/S/E/W)\r\n\t */\r\n\tgetBearingFromAngle(angle, numDirections) {\r\n\t\tnumDirections = numDirections || 8;\r\n\r\n\t\tvar snap_interval = Phaser.Math.PI2 / numDirections;\r\n\r\n\t\tvar angleSnap = Phaser.Math.Snap.To(angle, snap_interval);\r\n\t\tvar angleSnapDeg = Phaser.Math.RadToDeg(angleSnap);\r\n\t\tvar angleSnapDir = this.bearings[angleSnapDeg];\r\n\r\n\t\treturn angleSnapDir;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Given a bearing, return a direction object containing boolean flags for the four directions\r\n\t * @param {*} bearing\r\n\t */\r\n\tmapBearingToDirections(bearing) {\r\n\t\tlet thisDirection = {\r\n\t\t\t'UP': 0,\r\n\t\t\t'DOWN': 0,\r\n\t\t\t'LEFT': 0,\r\n\t\t\t'RIGHT': 0,\r\n\t\t\t'BEARING': bearing.toUpperCase()\r\n\t\t}\r\n\r\n\t\tif (bearing.toUpperCase().includes('W')) {\r\n\t\t\tthisDirection.LEFT = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('E')) {\r\n\t\t\tthisDirection.RIGHT = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('S')) {\r\n\t\t\tthisDirection.DOWN = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('N')) {\r\n\t\t\tthisDirection.UP = 1;\r\n\t\t}\r\n\r\n\t\treturn thisDirection;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Given a directions object, return the applicable bearing (8 way only)\r\n\t * @param {*} directions\r\n\t */\r\n\tmapDirectionsToBearing(directions, threshold) {\r\n\t\tvar threshold = threshold || -.5\r\n\t\tif (directions.UP && !(directions.LEFT || directions.RIGHT)) {\r\n\t\t\treturn 'N';\r\n\t\t}\r\n\t\tif (directions.RIGHT && directions.UP) {\r\n\t\t\treturn 'NE';\r\n\t\t}\r\n\t\tif (directions.RIGHT && !(directions.UP || directions.DOWN)) {\r\n\t\t\treturn 'E';\r\n\t\t}\r\n\t\tif (directions.RIGHT && directions.DOWN) {\r\n\t\t\treturn 'SE';\r\n\t\t}\r\n\t\tif (directions.DOWN && !(directions.LEFT || directions.RIGHT)) {\r\n\t\t\treturn 'S';\r\n\t\t}\r\n\t\tif (directions.LEFT && directions.DOWN) {\r\n\t\t\treturn 'SW';\r\n\t\t}\r\n\t\tif (directions.LEFT && !(directions.UP || directions.DOWN)) {\r\n\t\t\treturn 'W';\r\n\t\t}\r\n\t\tif (directions.LEFT && directions.UP) {\r\n\t\t\treturn 'NW';\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\r\n\t/**\r\n\t * Given a bearing, return the snapped angle in degrees\r\n\t * @param {*} bearing\r\n\t */\r\n\tmapBearingToDegrees(bearing) {\r\n\t\tif (bearing != '') {\r\n\t\t\treturn Object.keys(this.bearings).find(key => this.bearings[key] === bearing);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn '';\r\n\t\t}\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tthis.shutdown();\r\n\t\tthis.scene = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Return debug object\r\n\t */\r\n\tdebug() {\r\n\t\t// Debug variables\r\n\t\tvar debug = {\r\n\t\t\t'input': {}\r\n\t\t};\r\n\t\tdebug.input.gamepads = [];\r\n\t\t\r\n\t\tfor (var i = 0; i < this.gamepads.length; i++) {\r\n\t\t\tlet pad = this.gamepads[i];\r\n\t\t\tlet buttons = {};\r\n\t\t\tlet axes = {};\r\n\r\n\t\t\tfor (var b = 0; b < pad.buttons.length; b++) {\r\n\t\t\t\tlet button = pad.buttons[b];\r\n\t\t\t\tbuttons['B' + button.index] = button.value;\r\n\t\t\t}\r\n\r\n\t\t\tfor (var a = 0; a < pad.axes.length; a++) {\r\n\t\t\t\tlet axis = pad.axes[a];\r\n\t\t\t\taxes['A' + axis.index] = axis.getValue();\r\n\t\t\t}\r\n\r\n\t\t\tdebug.input.gamepads.push({\r\n\t\t\t\t'ID': pad.id,\r\n\t\t\t\t'Index': pad.index,\r\n\t\t\t\t'Buttons': buttons,\r\n\t\t\t\t'Axes': axes\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tdebug.players = [];\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\tdebug.players.push({\r\n\t\t\t\t'interaction': thisPlayer.interaction,\r\n\t\t\t\t'interaction_mapped': thisPlayer.interaction_mapped,\r\n//\t\t\t\t'device': thisPlayer.interaction.device,\r\n\t\t\t\t'buttons': thisPlayer.buttons,\r\n\t\t\t\t'buttons_mapped': thisPlayer.buttons_mapped,\r\n\t\t\t\t'interaction_mapped': thisPlayer.interaction_mapped,\r\n\t\t\t\t'pointer': thisPlayer.pointer,\r\n\t\t\t\t'direction': thisPlayer.direction,\r\n\t\t\t\t'direction_secondary': thisPlayer.direction_secondary,\r\n\t\t\t\t'keys': thisPlayer.keys\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn debug;\r\n\t}\r\n}\r\n","const bearings = {\r\n    '-180': 'W',\r\n    '-168.75': 'WBN',\r\n    '-157.5': 'WNW',\r\n    '-146.25': 'NWBW',\r\n    '-135': 'NW',\r\n    '-123.75': 'NWBN',\r\n    '-112.5': 'NNW',\r\n    '-101.25': 'NBW',\r\n    '-90': 'N',\r\n    '-78.75': 'NBE',\r\n    '-67.5': 'NNE',\r\n    '-56.25': 'NEBN',\r\n    '-45': 'NE',\r\n    '-33.75': 'NEBE',\r\n    '-22.5': 'EBE',\r\n    '-11.25': 'EBN',\r\n    '0': 'E',\r\n    '11.25': 'EBS',\r\n    '22.5': 'ESE',\r\n    '33.75': 'SEBE',\r\n    '45': 'SE',\r\n    '56.25': 'SEBS',\r\n    '67.5': 'SSE',\r\n    '78.75': 'SBE',\r\n    '90': 'S',\r\n    '101.25': 'SBW',\r\n    '112.5': 'SSW',\r\n    '123.75': 'SWBS',\r\n    '135': 'SW',\r\n    '146.25': 'SWBW',\r\n    '157.5': 'WSW',\r\n    '168.75': 'WBS',\r\n    '180': 'W'\r\n};\r\n\r\nmodule.exports = bearings;","import pad_generic from './configs/pad_generic'\r\nimport pad_unlicensedSNES from './configs/pad_unlicensedSNES'\r\nimport pad_xbox360 from './configs/pad_xbox360'\r\nimport pad_dualshock from './configs/pad_dualshock'\r\n\r\nexport default class controlManager {\r\n    constructor (){\r\n    }\r\n\r\n    mapGamepad(id) {\r\n        id = id.toLowerCase();\r\n        let padConfig = pad_generic;\r\n\r\n        if (id.includes('081f') && id.includes('e401')) {\r\n            padConfig = pad_unlicensedSNES;\r\n        }\r\n        else if (id.includes('xbox') && id.includes('360')) {\r\n            padConfig = pad_xbox360;\r\n        }\r\n        else if (id.includes('054c')) {\r\n            padConfig = pad_dualshock;\r\n        }\r\n        else {\r\n            \r\n        }\r\n\r\n        return padConfig;\r\n    }\r\n\r\n    getBaseControls() {\r\n        return {\r\n            'direction': {\r\n                'UP': 0,\r\n                'DOWN': 0,\r\n                'LEFT': 0,\r\n                'RIGHT': 0,\r\n                'BEARING': '',\r\n                'BEARING_LAST': '',\r\n                'DEGREES': 0,\r\n                'DEGREES_LAST': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'direction_secondary': {\r\n                'UP': 0,\r\n                'DOWN': 0,\r\n                'LEFT': 0,\r\n                'RIGHT': 0,\r\n                'BEARING': '',\r\n                'DEGREES': 0,\r\n                'BEARING_LAST': '',\r\n                'DEGREES_LAST': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'buttons': {},\r\n            'gamepadMapping': {\r\n                RC_S: 0,\r\n                RC_E: 1,\r\n                RC_W: 2,\r\n                RC_N: 3,\r\n                START: 9,\r\n                SELECT: 8,\r\n                LB: 4,\r\n                RB: 5,\r\n                LT: 6,\r\n                RT: 7,\r\n                LS: 10,\r\n                RS: 11,\r\n                LC_N: 12,\r\n                LC_S: 13,\r\n                LC_W: 14,\r\n                LC_E: 15,\r\n                MENU: 16\r\n            },\r\n            'pointer': {\r\n                'M1': 0,\r\n                'M2': 0,\r\n                'M3': 0,\r\n                'M4': 0,\r\n                'M5': 0,\r\n                'BEARING': '',\r\n                'BEARING_DEGREES': 0,\r\n                'ANGLE': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'position': {},\r\n            'gamepad': {},\r\n            'keys': {\r\n                'UP': [],\r\n                'DOWN': [],\r\n                'LEFT': [],\r\n                'RIGHT': [],\r\n            },\r\n            'internal': {\r\n                'fakedpadBuffer': [],\r\n                'fakedpadPressed': [],\r\n                'fakedpadReleased': [],\r\n            },\r\n            'interaction': {\r\n                'buffer': [],\r\n                'pressed': [],\r\n                'released': [],\r\n                'last': '',\r\n                'lastPressed': '',\r\n                'lastReleased': '',\r\n                'device': '',\r\n            },\r\n            'interaction_mapped': {\r\n                'pressed': [],\r\n                'released': [],\r\n                'last': '',\r\n                'lastPressed': '',\r\n                'lastReleased': '',\r\n                'gamepadType': '',\r\n            },\r\n            'buttons_mapped': {\r\n                RC_S: 0,\r\n                RC_E: 0,\r\n                RC_W: 0,\r\n                RC_N: 0,\r\n                START: 0,\r\n                SELECT: 0,\r\n                MENU: 0,\r\n                LB: 0,\r\n                RB: 0,\r\n                LT: 0,\r\n                RT: 0,\r\n                LS: 0,\r\n                RS: 0,\r\n                LC_N: 0,\r\n                LC_S: 0,\r\n                LC_W: 0,\r\n                LC_E: 0,\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Returns a struct to hold input control information\r\n     * Set up a struct for each player in the game\r\n     * Direction and Buttons contain the input from the devices\r\n     * The keys struct contains arrays of keyboard characters that will trigger the action\r\n     */\r\n    setupControls(numberOfButtons) {\r\n        numberOfButtons = numberOfButtons || 16;\r\n\r\n        let controls = this.getBaseControls();\r\n\r\n        // Add buttons\r\n        for (let i = 0; i <= numberOfButtons; i++) {\r\n            controls.buttons['B' + i] = 0;\r\n            controls.keys['B' + i] = [];\r\n        }\r\n\r\n        return controls;\r\n    }\r\n\r\n\r\n}\r\n","/**\r\n * Generic pad mapping\r\n */\r\nmodule.exports = {\r\n    padID: 'Generic',\r\n    padType: 'generic',\r\n    gamepadMapping: {\r\n        RC_S: 0,\r\n        RC_E: 1,\r\n        RC_W: 2,\r\n        RC_N: 3,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LT: 6,\r\n        RT: 7,\r\n        LS: 10,\r\n        RS: 11,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15\r\n    },\r\n}","/**\r\n * 081f-e401 - UnlicensedSNES\r\n */\r\nmodule.exports = {\r\n    padID: '081f-e401',\r\n    padType: 'snes',\r\n    gamepadMapping : {\r\n        RC_S: 2,\r\n        RC_E: 1,\r\n        RC_W: 3,\r\n        RC_N: 0,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15\r\n    }\r\n}","/**\r\n * Generic pad mapping\r\n */\r\nmodule.exports = {\r\n    padID: 'Xbox 360 controller (XInput STANDARD GAMEPAD)',\r\n    padType: 'xbox',\r\n    gamepadMapping: {\r\n        RC_S: 0,\r\n        RC_E: 1,\r\n        RC_W: 2,\r\n        RC_N: 3,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LT: 6,\r\n        RT: 7,\r\n        LS: 10,\r\n        RS: 11,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15,\r\n        MENU: 16\r\n    },\r\n}","/**\r\n * Dualshock mapping\r\n */\r\nmodule.exports = {\r\n    padID: 'Dualshock',\r\n    padType: 'Sony',\r\n    gamepadMapping: {\r\n        RC_S: 0,\r\n        RC_E: 1,\r\n        RC_W: 2,\r\n        RC_N: 3,\r\n        START: 9, // Options\r\n        SELECT: 8, // Share\r\n        LB: 4,\r\n        RB: 5,\r\n        LT: 6,\r\n        RT: 7,\r\n        LS: 10,\r\n        RS: 11,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15,\r\n        MENU: 16,\r\n        TOUCH: 17\r\n    },\r\n}"],"sourceRoot":""}