{"version":3,"sources":["webpack://MergedInput/webpack/universalModuleDefinition","webpack://MergedInput/webpack/bootstrap","webpack://MergedInput/./main.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","m","MergedInput","Phaser","Plugins","ScenePlugin","this","eventEmitter","systems","events","on","update","input","gamepad","once","thisGamepad","gamepadButtonDown","gamepadButtonUp","emit","device","id","player","index","action","players","addPlayer","gamepads","keyboard","event","keyCode","Object","keys","Input","Keyboard","KeyCodes","find","key","playerIndex","getPlayerIndexFromKey","getPlayer","interaction","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","thisPlayer","value","buffer","pressed","err","return","checkKeyboardInput","checkGamepadInput","push","setupControls","length","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","thisKey","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","controls","direction","UP","DOWN","LEFT","RIGHT","buttons","i","last","arguments","append","includes","addKey","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","entries","_step4$value","_slicedToArray","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","thisValue","isDown","JustDown","state","JustUp","button","pad","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","leftStick","y","Math","abs","up","down","x","left","right","b","shutdown","scene","debug","axes","a","axis","getValue","ID","Index","Buttons","Axes","pluginManager","_classCallCheck","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","c","d","name","getter","o","defineProperty","enumerable","get","r","toStringTag","t","mode","__esModule","ns","create","bind","n","object","property","prototype","hasOwnProperty","p","s","moduleId","l","modules"],"mappings":"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","file":"MergedInput.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"MergedInput\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MergedInput\"] = factory();\n\telse\n\t\troot[\"MergedInput\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default class MergedInput extends Phaser.Plugins.ScenePlugin {\n\n    /**\n     * The Merged Input plugin is designed to run in the background and handle input.\n     * Upon detecting a keypress or gamepad interaction, the plugin will update a player object and emit global events.\n     *\n     * @extends Phaser.Scene\n     * @param {*} scene \n     * @param {*} pluginManager \n     */\n    constructor(scene, pluginManager) {\n        super(scene, pluginManager);\n        this.scene = scene;\n\n        // Players\n        this.players = [];\n        // Gamepads\n        this.gamepads = [];\n        // Keys object to store Phaser key objects. We'll check these during update\n        this.keys = {};\n\n    }    \n\n    boot() {\n        this.eventEmitter = this.systems.events;\n        this.eventEmitter.on('update', this.update, this);\n\n        // Gamepad\n        if (typeof this.systems.input.gamepad !== 'undefined') {\n            this.systems.input.gamepad.once('connected', function (thisGamepad) {\n                thisGamepad.on('down', this.gamepadButtonDown, this);\n                thisGamepad.on('up', this.gamepadButtonUp, this);\n                this.eventEmitter.emit('mergedInput', {device:'gamepad', id:thisGamepad.id, player:thisGamepad.index, action:'Connected'});\n                if (typeof this.players[thisGamepad.index] === 'undefined') {\n                    this.addPlayer();\n                }\n                this.players[thisGamepad.index].gamepad = thisGamepad;\n            }, this);\n            this.gamepads = this.systems.input.gamepad.gamepads;\n        }\n\n        // Keyboard\n        this.systems.input.keyboard.on('keydown', function (event){\n            let keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\n            let playerIndex = this.getPlayerIndexFromKey(keyCode);\n            if (playerIndex > -1) {\n                this.getPlayer(playerIndex).interaction.device = 'keyboard';\n            }\n        }, this);\n        this.systems.input.keyboard.on('keyup', function (){\n            let keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\n            let playerIndex = this.getPlayerIndexFromKey(keyCode);\n            if (playerIndex > -1) {\n                this.getPlayer(playerIndex).interaction.device = 'keyboard';\n            }\n        }, this);\n    }\n\n    update() {\n        // Loop through players and manage buffered input\n        for (let thisPlayer of this.players) {\n            if (thisPlayer.interaction.buffer == '') {\n                thisPlayer.interaction.pressed = '';\n            }\n            if (thisPlayer.interaction.pressed != '') {\n                thisPlayer.interaction.buffer = '';\n            }\n        }\n\n        this.checkKeyboardInput();\n        this.checkGamepadInput();\n    }\n\n    \n \n\n    /**\n     * Add a new player object to the players array\n     */\n    addPlayer() {\n        this.players.push(this.setupControls());\n        this.players[this.players.length-1].index = this.players.length-1;\n        return this.players[this.players.length-1];\n    }\n\n    /**\n     * Get player object\n     * @param {number} index Player index \n     */\n    getPlayer(index) {\n        return typeof this.players[index] !== 'undefined' ? this.players[index] : ''\n    }\n\n    getPlayerIndexFromKey(key) {\n        for (let thisPlayer of this.players) {\n            // Loop through all the keys assigned to this player\n            for (var thisKey in thisPlayer.keys) {\n                for (var thisValue of thisPlayer.keys[thisKey]) {\n                    if (thisValue == key) {\n                        return thisPlayer.index;\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Returns a struct to hold input control information\n     * Set up a struct for each player in the game\n     * Direction and Buttons contain the input from the devices\n     * The keys struct contains arrays of keyboard characters that will trigger the action\n     */\n    setupControls() {\n        let controls = {\n            'direction': {\n                'UP': 0,\n                'DOWN': 0,\n                'LEFT': 0,\n                'RIGHT': 0\n            },\n            'buttons': {},\n            'interaction': {},\n            'gamepad': {},\n            'keys': {\n                'UP': [],\n                'DOWN': [],\n                'LEFT': [],\n                'RIGHT': [],\n            }\n        }\n        for (let i=1; i<=16; i++) {\n            controls.buttons['B'+i] = 0;\n            controls.keys['B'+i] = [];\n        }\n\n        controls.interaction.buffer = '';\n        controls.interaction.pressed = '';\n        controls.interaction.last = '';\n        controls.interaction.device = '';\n\n        return controls;\n    }\n\n    // Keyboard functions\n\n    /**\n     * Define a key for a player/action combination\n     * @param {number} player The player on which we're defining a key\n     * @param {string} action The action to define\n     * @param {string} value The key to use\n     * @param {boolean} append When true, this key definition will be appended to the existing key(s) for this action\n     */\n    defineKey(player = 0, action, value, append = false) {\n        // Set up a new player if none defined\n        if (typeof this.players[player] === 'undefined') {\n            this.addPlayer();\n        }\n\n        if (['UP','DOWN','LEFT','RIGHT','B0','B1','B2','B3','B4','B5','B6','B7','B8','B9','B10','B11','B12','B13','B14','B15','B16'].includes(action)) {\n            if (append) {\n                this.players[player].keys[action].push([value]);\n            }\n            else {\n                this.players[player].keys[action] = [];\n                this.players[player].keys[action].push([value]);\n            }\n\n            this.keys[[value]] = this.systems.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes[value]);\n        }\n\n        return this;\n    }\n\n    /**\n     * Iterate through players and check for interaction with defined keys\n     */\n    checkKeyboardInput() {\n        // Loop through players and check for keypresses - use of 'entries()' gives us an index to use for the player\n        for (let [playerIndex, thisPlayer] of this.players.entries()) {\n            // Loop through all the keys assigned to this player\n            for (var thisKey in thisPlayer.keys) {\n                let action = 0;\n                for (var thisValue of thisPlayer.keys[thisKey]) {\n                    // Check if the key is down\n                    action = (this.keys[thisValue].isDown) ? 1 : action;\n\n                    // Emit events based on the key down and up values\n                    if(Phaser.Input.Keyboard.JustDown(this.keys[thisValue])) {\n                        this.eventEmitter.emit('mergedInput', {device:'keyboard', value:1, player:playerIndex, action:thisKey, state: 'DOWN'});\n                        // Update the last button state\n                        thisPlayer.interaction.pressed = thisKey;\n                        thisPlayer.interaction.buffer = thisKey;\n                        thisPlayer.interaction.last = thisKey;\n                    }\n                    if(Phaser.Input.Keyboard.JustUp(this.keys[thisValue])) {\n                        this.eventEmitter.emit('mergedInput', {device:'keyboard', value:1, player:playerIndex, action:thisKey, state: 'UP'});\n                    }\n                }\n\n                // Set the action in the player object\n                if (['UP','DOWN','LEFT','RIGHT'].includes(thisKey)) {\n                    thisPlayer.direction[thisKey] = action;\n                }\n                else {\n                    thisPlayer.buttons[thisKey] = action;\n                }\n\n                // Set the latest interaction flag\n                if (action == 1) {\n                    thisPlayer.interaction.device = 'keyboard';\n                }\n            }\n        }\n    }\n\n\n\n    // Gamepad functions\n\n    /**\n     * When a gamepad button is pressed down, this function will emit a mergedInput event in the global registry.\n     * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\n     * @param {number} index Button index\n     * @param {number} value Button value\n     * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\n     */\n    gamepadButtonDown(index, value, button){\n        this.players[button.pad.index].interaction.device = 'gamepad';\n        this.eventEmitter.emit('mergedInput', {device:'gamepad', value:value, player:button.pad.index, action:'B' + index, state: 'DOWN'});\n        // DPad mapping\n        if (index === 12) {\n            this.eventEmitter.emit('mergedInput', {device:'gamepad', value:1, player:button.pad.index, action:'UP', state: 'DOWN'});\n        }\n        if (index === 13) {\n            this.eventEmitter.emit('mergedInput', {device:'gamepad', value:1, player:button.pad.index, action:'DOWN', state: 'DOWN'});\n        }\n        if (index === 14) {\n            this.eventEmitter.emit('mergedInput', {device:'gamepad', value:1, player:button.pad.index, action:'LEFT', state: 'DOWN'});\n        }\n        if (index === 15) {\n            this.eventEmitter.emit('mergedInput', {device:'gamepad', value:1, player:button.pad.index, action:'RIGHT', state: 'DOWN'});\n        }\n\n        // Last button pressed\n        if (![12,13,14,15].includes(index)) {\n            // Update the last button state\n            this.players[button.pad.index].interaction.pressed = 'B' + index;\n            this.players[button.pad.index].interaction.last = 'B' + index;\n            this.players[button.pad.index].interaction.buffer = 'B' + index;\n        }\n    }\n\n    /**\n     * When a gamepad button is released, this function will emit a mergedInput event in the global registry.\n     * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\n     * @param {number} index Button index\n     * @param {number} value Button value\n     * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\n     */\n    gamepadButtonUp(index, value, button){\n        this.players[button.pad.index].interaction.device = 'gamepad';\n        this.eventEmitter.emit('mergedInput', {device:'gamepad', value:value, player:button.pad.index, action:'B' + index, state: 'UP'});\n        // DPad mapping\n        if (index === 12) {\n            this.eventEmitter.emit('mergedInput', {device:'gamepad', value:1, player:button.pad.index, action:'UP' + index, state: 'UP'});\n        }\n        if (index === 13) {\n            this.eventEmitter.emit('mergedInput', {device:'gamepad', value:1, player:button.pad.index, action:'DOWN' + index, state: 'UP'});\n        }\n        if (index === 14) {\n            this.eventEmitter.emit('mergedInput', {device:'gamepad', value:1, player:button.pad.index, action:'LEFT' + index, state: 'UP'});\n        }\n        if (index === 15) {\n            this.eventEmitter.emit('mergedInput', {device:'gamepad', value:1, player:button.pad.index, action:'RIGHT' + index, state: 'UP'});\n        }\n    }\n\n    /**\n     * Iterate through gamepads and handle interactions\n     */\n    checkGamepadInput() {\n        // Check for gamepad input\n        for (var thisGamepad of this.gamepads) {\n\n            // Directions\n            if (thisGamepad.leftStick.y < -0.5) {\n                this.players[thisGamepad.index].direction.UP = Math.abs(thisGamepad.leftStick.y)\n            }\n            else if (thisGamepad.leftStick.y > 0.5) {\n                this.players[thisGamepad.index].direction.DOWN = thisGamepad.leftStick.y\n            }\n            else if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\n                // DPad\n                this.players[thisGamepad.index].direction.UP = thisGamepad.up ? 1 : 0;\n                this.players[thisGamepad.index].direction.DOWN = thisGamepad.down ? 1 : 0;\n            }\n\n            if (thisGamepad.leftStick.x < -0.5) {\n                this.players[thisGamepad.index].direction.LEFT = Math.abs(thisGamepad.leftStick.x)\n            }\n            else if (thisGamepad.leftStick.x > 0.5) {\n                this.players[thisGamepad.index].direction.RIGHT = thisGamepad.leftStick.x\n            }\n            else if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\n                // DPad\n                this.players[thisGamepad.index].direction.LEFT = thisGamepad.left ? 1 : 0;\n                this.players[thisGamepad.index].direction.RIGHT = thisGamepad.right ? 1 : 0;\n            }\n\n            if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\n                // Buttons\n                for (var b = 0; b < thisGamepad.buttons.length; b++) {\n                    let button = thisGamepad.buttons[b];\n                    this.players[thisGamepad.index].buttons['B' + b] = button.value;\n                }\n            }\n        }\n    }\n    \n\n    destroy() {\n        this.shutdown();\n        this.scene = undefined;\n    }\n\n    /**\n     * Return debug object\n     */\n    debug() {\n\t\t// Debug variables\n\t\tvar debug = {\n            'input' : {}\n        };\n        debug.input.gamepads = [];\n        for (var i = 0; i < this.gamepads.length; i++) {\n            let pad = this.gamepads[i];\n            let buttons = {};\n            let axes = {};\n\n            for (var b = 0; b < pad.buttons.length; b++) {\n                let button = pad.buttons[b];\n                buttons['B' + button.index] = button.value;\n            }\n\n\n            for (var a = 0; a < pad.axes.length; a++) {\n                let axis = pad.axes[a];\n                axes['A' + axis.index] = axis.getValue();\n            }\n\n            debug.input.gamepads.push({\n                'ID':       pad.id,\n                'Index':    pad.index,\n                'Buttons':  buttons,\n                'Axes':     axes\n            });\n        }\n        \n        debug.players = this.players;\n\n\t\treturn debug;\n    }\n}"],"sourceRoot":""}