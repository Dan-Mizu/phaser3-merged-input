{"version":3,"sources":["webpack://MergedInput/webpack/universalModuleDefinition","webpack://MergedInput/webpack/bootstrap","webpack://MergedInput/./main.js","webpack://MergedInput/./configs/bearings.js","webpack://MergedInput/./controlManager.js","webpack://MergedInput/./configs/pad_generic.js","webpack://MergedInput/./configs/pad_unlicensedSNES.js","webpack://MergedInput/./configs/pad_xbox360.js","webpack://MergedInput/./configs/pad_dualshock.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","m","MergedInput","Phaser","Plugins","ScenePlugin","_this2","this","eventEmitter","systems","events","on","preupdate","postupdate","game","Core","Events","BLUR","loseFocus","input","gamepad","thisGamepad","refreshGamepads","setupGamepad","refreshPads","total","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","gamepads","Symbol","iterator","next","done","value","emit","err","return","gamepadButtonDown","gamepadButtonUp","keyboard","keyboardKeyDown","keyboardKeyUp","mouse","disableContextMenu","pointer","pointerMove","pointerDown","pointerUp","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","players","thisPlayer","BEARING","BEARING_DEGREES","ANGLE","direction","mapDirectionsToBearing","BEARING_LAST","DEGREES","parseFloat","mapBearingToDegrees","DEGREES_LAST","direction_secondary","checkKeyboardInput","checkGamepadInput","checkPointerInput","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","clearBuffer","interaction","pressed","internal","fakedpadPressed","buffer","interaction_mapped","fakedpadReleased","released","thisKey","keys","reset","device","id","player","index","action","addPlayer","gamepadID","toLowerCase","mappedPad","controlManager","mapGamepad","thisButton","gamepadMapping","gamepadType","padType","buttons_mapped","filter","el","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","entries","_step4$value","_slicedToArray","fakedpad","buttons","length","numberOfButtons","_typeof","Number","isInteger","push","setupControls","key","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","actions","apply","_toConsumableArray","Object","buttonID","toString","replace","find","arguments","append","getPlayerActions","includes","addKey","Input","Keyboard","KeyCodes","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","thisValue","isDown","TIMESTAMP","scene","sys","time","now","event","keyCode","playerIndex","getPlayerIndexFromKey","playerAction","getPlayerButtonFromKey","getPlayer","state","last","lastPressed","dpadMappings","mappedButton","getMappedButton","lastReleased","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","pad","button","dpadMapping","fakedpadBuffer","Gamepad","Button","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","leftStick","y","UP","Math","abs","gamepadFakeDPadPress","DOWN","up","down","x","LEFT","RIGHT","left","right","gamepadFakeDPadRelease","rightStick","b","threshold","distance","pointerDirection","getBearingFromAngle","angle","position","angleToPointer","Angle","Between","worldX","worldY","pointerAngle","leftButtonDown","rightButtonDown","middleButtonDown","backButtonDown","forwardButtonDown","moveTime","leftButtonReleased","rightButtonReleased","middleButtonReleased","backButtonReleased","forwardButtonReleased","numDirections","snap_interval","PI2","angleSnap","Snap","To","angleSnapDeg","RadToDeg","bearings","bearing","thisDirection","toUpperCase","directions","_this3","shutdown","debug","i","axes","a","axis","getValue","ID","Index","Buttons","Axes","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","_debug$players$push","_defineProperty","pluginManager","_classCallCheck","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","-180","-168.75","-157.5","-146.25","-135","-123.75","-112.5","-101.25","-90","-78.75","-67.5","-56.25","-45","-33.75","-22.5","-11.25","0","11.25","22.5","33.75","45","56.25","67.5","78.75","90","101.25","112.5","123.75","135","146.25","157.5","168.75","180","padConfig","pad_generic","pad_unlicensedSNES","pad_xbox360","pad_dualshock","RC_S","RC_E","RC_W","RC_N","START","SELECT","LB","RB","LT","RT","LS","RS","LC_N","LC_S","LC_W","LC_E","MENU","M1","M2","M3","M4","M5","controls","getBaseControls","padID","TOUCH","c","d","name","getter","o","defineProperty","enumerable","get","r","toStringTag","t","mode","__esModule","ns","create","bind","n","object","property","prototype","hasOwnProperty","p","s","moduleId","l","modules"],"mappings":"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","file":"MergedInput.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"MergedInput\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MergedInput\"] = factory();\n\telse\n\t\troot[\"MergedInput\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import bearings from './configs/bearings'\r\nimport controlManager from './controlManager'\r\n\r\nexport default class MergedInput extends Phaser.Plugins.ScenePlugin {\r\n\r\n\t/**\r\n\t * The Merged Input plugin is designed to run in the background and handle input.\r\n\t * Upon detecting a keypress or gamepad interaction, the plugin will update a player object and emit global events.\r\n\t *\r\n\t * @extends Phaser.Plugins.ScenePlugin\r\n\t * @param {*} scene\r\n\t * @param {*} pluginManager\r\n\t */\r\n\tconstructor(scene, pluginManager) {\r\n\t\tsuper(scene, pluginManager);\r\n\t\tthis.scene = scene;\r\n\r\n\t\t// Players\r\n\t\tthis.players = [];\r\n\t\t// Gamepads\r\n\t\tthis.gamepads = [];\r\n\t\t// Keys object to store Phaser key objects. We'll check these during update\r\n\t\tthis.keys = {};\r\n\r\n\t\tthis.bearings = bearings;\r\n\r\n\t\tthis.dpadMappings = {\r\n\t\t\t'UP': 12,\r\n\t\t\t'DOWN': 13,\r\n\t\t\t'LEFT': 14,\r\n\t\t\t'RIGHT': 15\r\n\t\t}\r\n\r\n\t\tthis.controlManager = new controlManager()\r\n\t}\r\n\r\n\tboot() {\r\n\t\tthis.eventEmitter = this.systems.events;\r\n\t\tthis.eventEmitter.on('preupdate', this.preupdate, this);\r\n\t\tthis.eventEmitter.on('postupdate', this.postupdate, this);\r\n\t\t// Handle the game losing focus\r\n\t\tthis.game.events.on(Phaser.Core.Events.BLUR, () => {\r\n\t\t\tthis.loseFocus()\r\n\t\t})\r\n\r\n\t\t// Gamepad\r\n\t\tif (typeof this.systems.input.gamepad !== 'undefined') {\r\n\t\t\tthis.systems.input.gamepad.on('connected', function (thisGamepad) {\r\n\t\t\t\tthis.refreshGamepads();\r\n\t\t\t\tthis.setupGamepad(thisGamepad)\r\n\t\t\t}, this);\r\n\r\n\t\t\t// Check to see if the gamepad has already been setup by the browser\r\n\t\t\tthis.systems.input.gamepad.refreshPads();\r\n\t\t\tif (this.systems.input.gamepad.total) {\r\n\t\t\t\tthis.refreshGamepads();\r\n\t\t\t\tfor (const thisGamepad of this.gamepads) {\r\n\t\t\t\t\tthis.systems.input.gamepad.emit('connected', thisGamepad);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.systems.input.gamepad.on('down', this.gamepadButtonDown, this);\r\n\t\t\tthis.systems.input.gamepad.on('up', this.gamepadButtonUp, this);\r\n\t\t}\r\n\r\n\t\t// Keyboard\r\n\t\tthis.systems.input.keyboard.on('keydown', this.keyboardKeyDown, this);\r\n\t\tthis.systems.input.keyboard.on('keyup', this.keyboardKeyUp, this);\r\n\r\n\r\n\t\t// Pointer\r\n\t\tthis.systems.input.mouse.disableContextMenu();\r\n\r\n\t\tthis.systems.input.on('pointermove', function (pointer) {\r\n\t\t\tthis.pointerMove(pointer);\r\n\t\t}, this);\r\n\r\n\t\tthis.systems.input.on('pointerdown', function (pointer) {\r\n\t\t\tthis.pointerDown(pointer);\r\n\t\t}, this);\r\n\r\n\t\tthis.systems.input.on('pointerup', function (pointer) {\r\n\t\t\tthis.pointerUp(pointer);\r\n\t\t}, this);\r\n\t}\r\n\r\n\tpreupdate() {\r\n\t\t// Loop through players and handle input\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// If the pointer hasn't moved, and the scene has changed, this can end up as undefined\r\n\t\t\tthisPlayer.pointer.BEARING = typeof thisPlayer.pointer.BEARING != 'undefined' ? thisPlayer.pointer.BEARING : '';\r\n\t\t\tthisPlayer.pointer.BEARING_DEGREES = typeof thisPlayer.pointer.BEARING_DEGREES != 'undefined' ? thisPlayer.pointer.BEARING_DEGREES : 0;\r\n\t\t\tthisPlayer.pointer.ANGLE = typeof thisPlayer.pointer.ANGLE != 'undefined' ? thisPlayer.pointer.ANGLE : '';\r\n\r\n\r\n\t\t\tthisPlayer.direction.BEARING = this.mapDirectionsToBearing(thisPlayer.direction);\r\n\t\t\tthisPlayer.direction.BEARING_LAST = thisPlayer.direction.BEARING != '' ? thisPlayer.direction.BEARING : thisPlayer.direction.BEARING_LAST;\r\n\t\t\tthisPlayer.direction.DEGREES = thisPlayer.direction.BEARING != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction.BEARING)) : 0;\r\n\t\t\tthisPlayer.direction.DEGREES_LAST = thisPlayer.direction.BEARING_LAST != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction.BEARING_LAST)) : 0;\r\n\t\t\tthisPlayer.direction_secondary.BEARING = this.mapDirectionsToBearing(thisPlayer.direction_secondary);\r\n\t\t\tthisPlayer.direction_secondary.BEARING_LAST = thisPlayer.direction_secondary.BEARING != '' ? thisPlayer.direction_secondary.BEARING : thisPlayer.direction_secondary.BEARING_LAST;\r\n\t\t\tthisPlayer.direction_secondary.DEGREES = thisPlayer.direction_secondary.BEARING != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction_secondary.BEARING)) : 0;\r\n\t\t\tthisPlayer.direction_secondary.DEGREES_LAST = thisPlayer.direction_secondary.BEARING_LAST != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction_secondary.BEARING_LAST)) : 0;\r\n\t\t}\r\n\r\n\t\tthis.checkKeyboardInput();\r\n\t\tthis.checkGamepadInput();\r\n\t\tthis.checkPointerInput();\r\n\t}\r\n\r\n\tpostupdate() {\r\n\t\t// Loop through players and manage buffered input\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Clear the interaction buffer\r\n\t\t\tthis.clearBuffer(thisPlayer);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clear the interaction buffer for the given player\r\n\t * In the case of 'fake' DPad presses, we're using some convoluted buffers to keep the 'pressed' and 'released' values around for an extra tick\r\n\t * As they're created in this update loop, they're otherwise cleared before the consumer can use them.\r\n\t * @param {*} thisPlayer \r\n\t */\r\n\tclearBuffer(thisPlayer) {\r\n\t\tif (thisPlayer.interaction.pressed != '' && thisPlayer.internal.fakedpadPressed == '') {\r\n\t\t\tthisPlayer.interaction.buffer = '';\r\n\t\t}\r\n\t\tif (thisPlayer.interaction.buffer == '') {\r\n\t\t\tthisPlayer.interaction.pressed = '';\r\n\t\t\tthisPlayer.interaction_mapped.pressed = '';\r\n\t\t\tif (thisPlayer.internal.fakedpadReleased == '') {\r\n\t\t\t\tthisPlayer.interaction.released = '';\r\n\t\t\t\tthisPlayer.interaction_mapped.released = '';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthisPlayer.internal.fakedpadPressed = '';\r\n\t\tthisPlayer.internal.fakedpadReleased = '';\r\n\t}\r\n\r\n\t/**\r\n\t * Function to run when the game loses focus\r\n\t * We want to fake releasing the buttons here, so that they're not stuck down without an off event when focus returns to the game\r\n\t */\r\n\tloseFocus() {\r\n\t\t// Loop through defined keys and reset them\r\n\t\tfor (let thisKey in this.keys) {\r\n\t\t\tthis.keys[thisKey].reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set up the gamepad and associate with a player object\r\n\t */\r\n\tsetupGamepad(thisGamepad) {\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', id: thisGamepad.id, player: thisGamepad.index, action: 'Connected' });\r\n\r\n\t\tif (typeof this.players[thisGamepad.index] === 'undefined') {\r\n\t\t\tthis.addPlayer();\r\n\t\t}\r\n\t\t\r\n\t\tlet gamepadID = thisGamepad.id.toLowerCase();\r\n\t\tthis.players[thisGamepad.index].gamepad = thisGamepad;\r\n\r\n\t\t// Map the gamepad buttons\r\n\t\tlet mappedPad = this.controlManager.mapGamepad(gamepadID);\r\n\t\tthis.players[thisGamepad.index].gamepadMapping = mappedPad.gamepadMapping;\r\n\t\tthis.players[thisGamepad.index].interaction_mapped.gamepadType = mappedPad.padType;\r\n\t\tfor (let thisButton in this.players[thisGamepad.index].gamepadMapping) {\r\n\t\t\tthis.players[thisGamepad.index].buttons_mapped[thisButton] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trefreshGamepads() {\r\n\t\t// Sometimes, gamepads are undefined. For some reason.\r\n\t\tthis.gamepads = this.systems.input.gamepad.gamepads.filter(function (el) {\r\n\t\t\treturn el != null;\r\n\t\t});\r\n\r\n\t\tfor (const [index, thisGamepad] of this.gamepads.entries()) {\r\n\t\t\tthisGamepad.index = index; // Overwrite the gamepad index, in case we had undefined gamepads earlier\r\n\r\n\t\t\t/**\r\n\t\t\t * Some cheap gamepads use the first axis as a dpad, in which case we won't have the dpad buttons 12-15\r\n\t\t\t */\r\n\t\t\tthisGamepad.fakedpad = thisGamepad.buttons.length < 15;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add a new player object to the players array\r\n\t * @param {number} index Player index - if a player object at this index already exists, it will be returned instead of creating a new player object\r\n\t * @param {number} numberOfButtons The number of buttons to assign to the player object. Defaults to 16. Fewer than 16 is not recommended, as gamepad DPads typically map to buttons 12-15\r\n\t */\r\n\taddPlayer(index, numberOfButtons) {\r\n\t\tnumberOfButtons = numberOfButtons || 16;\r\n\t\tif (typeof Number.isInteger(index) && typeof this.players[index] !== 'undefined') {\r\n\t\t\treturn this.players[index];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.players.push(this.controlManager.setupControls(numberOfButtons));\r\n\t\t\tthis.players[this.players.length - 1].index = this.players.length - 1;\r\n\t\t\treturn this.players[this.players.length - 1];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get player object\r\n\t * @param {number} index Player index\r\n\t */\r\n\tgetPlayer(index) {\r\n\t\treturn typeof this.players[index] !== 'undefined' ? this.players[index] : ''\r\n\t}\r\n\r\n\tgetPlayerIndexFromKey(key) {\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\tif (thisValue == key) {\r\n\t\t\t\t\t\treturn thisPlayer.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tgetPlayerButtonFromKey(key) {\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\tif (thisValue == key) {\r\n\t\t\t\t\t\t// Now we have a matching button value, check to see if it's in our mapped buttons, in which case we want to return the button number it matches to\r\n\t\t\t\t\t\tif (typeof thisPlayer.gamepadMapping[thisKey] !== \"undefined\") {\r\n\t\t\t\t\t\t\treturn 'B' + thisPlayer.gamepadMapping[thisKey];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\treturn thisKey;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Return an array of actions that a player may use\r\n\t * @param {number} player \r\n\t * @returns \r\n\t */\r\n\tgetPlayerActions(player) {\r\n\t\tlet actions = ['UP', 'DOWN', 'LEFT', 'RIGHT', 'ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT'];\r\n\t\tactions.push(...Object.keys(this.players[player].gamepadMapping));\r\n\t\tactions.push(...Object.keys(this.players[player].buttons));\r\n\r\n\t\treturn actions;\r\n\t}\r\n\r\n\t/**\r\n\t * Given a player and a button ID, return the mapped button name, e.g. 0 = 'RC_S' (Right cluster, South - X on an xbox gamepad)\r\n\t * @param {*} player \r\n\t * @param {*} buttonID \r\n\t */\r\n\tgetMappedButton(player, buttonID) {\r\n\t\tbuttonID = buttonID.toString().replace(/\\D/g, '');\r\n\t\treturn Object.keys(player.gamepadMapping).find(key => player.gamepadMapping[key] == buttonID);\r\n\t}\r\n\r\n\t// Keyboard functions\r\n\r\n\t/**\r\n\t * Define a key for a player/action combination\r\n\t * @param {number} player The player on which we're defining a key\r\n\t * @param {string} action The action to define\r\n\t * @param {string} value The key to use\r\n\t * @param {boolean} append When true, this key definition will be appended to the existing key(s) for this action\r\n\t */\r\n\tdefineKey(player = 0, action, value, append = false) {\r\n\t\t// Set up a new player if none defined\r\n\t\tif (typeof this.players[player] === 'undefined') {\r\n\t\t\tthis.addPlayer();\r\n\t\t}\r\n\r\n\t\tif (this.getPlayerActions(player).includes(action)) {\r\n\t\t\tif (append && (typeof this.players[player].keys[action] !== 'undefined')) {\r\n\t\t\t\tthis.players[player].keys[action].push([value]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[player].keys[action] = [];\r\n\t\t\t\tthis.players[player].keys[action].push([value]);\r\n\t\t\t}\r\n\r\n\t\t\tthis.keys[[value]] = this.systems.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes[value]);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Iterate through players and check for interaction with defined keys\r\n\t */\r\n\tcheckKeyboardInput() {\r\n\t\t// Loop through players and check for keypresses\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tlet action = 0;\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\t// Check if the key is down\r\n\t\t\t\t\taction = (this.keys[thisValue].isDown) ? 1 : action;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set the action in the player object\r\n\r\n\t\t\t\t// Dpad\r\n\t\t\t\tif (['UP', 'DOWN', 'LEFT', 'RIGHT'].includes(thisKey)) {\r\n\t\t\t\t\tthisPlayer.direction[thisKey] = action;\r\n\t\t\t\t\tthisPlayer.direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t}\r\n\t\t\t\t// Alternative direction\r\n\t\t\t\telse if (['ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT'].includes(thisKey)) {\r\n\t\t\t\t\tthisPlayer.direction_secondary[thisKey.replace('ALT_', '')] = action;\r\n\t\t\t\t\tif (action == 1) {\r\n\t\t\t\t\t\tthisPlayer.direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Friendly button names\r\n\t\t\t\telse if (thisKey in thisPlayer.gamepadMapping) {\r\n\t\t\t\t\t// Get the button number from the gamepad mapping\r\n\t\t\t\t\tthisPlayer.buttons['B' + thisPlayer.gamepadMapping[thisKey]] = action;\r\n\t\t\t\t\tthisPlayer.buttons_mapped[thisKey] = action;\r\n\t\t\t\t\tif (action == 1) {\r\n\t\t\t\t\t\tthisPlayer.buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Numbered buttons\r\n\t\t\t\telse {\r\n\t\t\t\t\tthisPlayer.buttons[thisKey] = action;\r\n\t\t\t\t\tif (action == 1) {\r\n\t\t\t\t\t\tthisPlayer.buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set the latest interaction flag\r\n\t\t\t\tif (action == 1) {\r\n\t\t\t\t\tthisPlayer.interaction.device = 'keyboard';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a keyboard button is pressed down, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the key, and passes a mapped action and value\r\n\t */\r\n\tkeyboardKeyDown(event) {\r\n\t\tlet keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\r\n\t\tlet playerIndex = this.getPlayerIndexFromKey(keyCode);\r\n\t\tlet playerAction = this.getPlayerButtonFromKey(keyCode);\r\n\r\n\t\tif (playerIndex > -1 && playerAction != '') {\r\n\t\t\tlet thisPlayer = this.getPlayer(playerIndex);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'keyboard', value: 1, player: playerIndex, action: keyCode, state: 'DOWN' });\r\n\r\n\t\t\tthisPlayer.interaction.device = 'keyboard';\r\n\t\t\tthisPlayer.interaction.pressed = playerAction;\r\n\t\t\tthisPlayer.interaction.buffer = playerAction;\r\n\t\t\tthisPlayer.interaction.last = playerAction;\r\n\t\t\tthisPlayer.interaction.lastPressed = playerAction;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tif (typeof this.dpadMappings[playerAction] !== \"undefined\") {\r\n\t\t\t\tplayerAction = 'B' + this.dpadMappings[playerAction];\r\n\t\t\t}\r\n\t\t\tif (typeof thisPlayer.buttons[playerAction] !== \"undefined\") {\r\n\t\t\t\tlet mappedButton = this.getMappedButton(thisPlayer, playerAction);\r\n\t\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\t\tthisPlayer.buttons_mapped[mappedButton] = 1;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.pressed = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.last = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.lastPressed = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.gamepadType = 'keyboard';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a keyboard button is released, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the key, and passes a mapped action and value\r\n\t */\r\n\tkeyboardKeyUp(event) {\r\n\t\tlet keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\r\n\t\tlet playerIndex = this.getPlayerIndexFromKey(keyCode);\r\n\t\tlet playerAction = this.getPlayerButtonFromKey(keyCode);\r\n\r\n\t\tif (playerIndex > -1 && playerAction != '') {\r\n\t\t\tlet thisPlayer = this.getPlayer(playerIndex);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'keyboard', value: 1, player: playerIndex, action: keyCode, state: 'DOWN' });\r\n\r\n\t\t\tthisPlayer.interaction.device = 'keyboard';\r\n\t\t\tthisPlayer.interaction.released = playerAction;\r\n\t\t\tthisPlayer.interaction.lastReleased = playerAction;\r\n\t\t\t\r\n\t\t\t// Update mapped button object\r\n\t\t\tif (typeof this.dpadMappings[playerAction] !== \"undefined\") {\r\n\t\t\t\tplayerAction = 'B' + this.dpadMappings[playerAction];\r\n\t\t\t}\r\n\t\t\tif (typeof thisPlayer.buttons[playerAction] !== \"undefined\") {\r\n\t\t\t\tlet mappedButton = this.getMappedButton(thisPlayer, playerAction);\r\n\t\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\t\tthisPlayer.buttons_mapped[mappedButton] = 0;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.released = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.lastReleased = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.gamepadType = 'keyboard';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Iterate through players and check for interaction with defined pointer buttons\r\n\t */\r\n\tcheckPointerInput() {\r\n\t\t// Loop through players and check for button presses\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) { // Each definition for this key action\r\n\t\t\t\t\tif (['M1', 'M2', 'M3', 'M4', 'M5'].includes(thisValue[0])) {\r\n\t\t\t\t\t\t// Check to see if button is pressed (stored in P1, can't have two mice...)\r\n\t\t\t\t\t\tif (this.players[0].pointer[thisValue] == 1) {\r\n\t\t\t\t\t\t\tthisPlayer.buttons[thisKey] = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// Gamepad functions\r\n\r\n\t/**\r\n\t * When a gamepad button is pressed down, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\r\n\t * @param {number} index Button index\r\n\t * @param {number} value Button value\r\n\t * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\r\n\t */\r\n\tgamepadButtonDown(pad, button, value) {\r\n\t\tthis.players[pad.index].interaction.device = 'gamepad';\r\n\t\tthis.players[pad.index].buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: value, player: pad.index, action: 'B' + button.index, state: 'DOWN' });\r\n\r\n\t\t// Buttons\r\n\t\tif (![12, 13, 14, 15].includes(button.index)) {\r\n\t\t\t// Update the last button state\r\n\t\t\tthis.players[pad.index].interaction.pressed = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.last = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.lastPressed = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.buffer = 'B' + button.index;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.pressed = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.last = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastPressed = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t\t// DPad\r\n\t\telse {\r\n\t\t\tlet dpadMapping = this.dpadMappings;\r\n\t\t\tlet direction = Object.keys(dpadMapping).find(key => dpadMapping[key] == button.index);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: direction, state: 'DOWN' });\r\n\t\t\tthis.players[pad.index].interaction.pressed = direction;\r\n\t\t\tthis.players[pad.index].interaction.last = direction;\r\n\t\t\tthis.players[pad.index].interaction.lastPressed = direction;\r\n\t\t\tthis.players[pad.index].interaction.buffer = direction;\r\n\t\t\tthis.players[pad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.pressed = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.last = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastPressed = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a gamepad button is released, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\r\n\t * @param {number} index Button index\r\n\t * @param {number} value Button value\r\n\t * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\r\n\t */\r\n\tgamepadButtonUp(pad, button, value) {\r\n\t\tthis.players[pad.index].interaction.device = 'gamepad';\r\n\t\tthis.players[pad.index].buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: value, player: pad.index, action: 'B' + button.index, state: 'UP' });\r\n\r\n\t\t// Buttons\r\n\t\tif (![12, 13, 14, 15].includes(button.index)) {\r\n\t\t\t// Update the last button state\r\n\t\t\tthis.players[pad.index].interaction.released = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.lastReleased = 'B' + button.index;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.released = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastReleased = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t\t// DPad\r\n\t\telse {\r\n\t\t\tlet dpadMapping = this.dpadMappings;\r\n\t\t\tlet direction = Object.keys(dpadMapping).find(key => dpadMapping[key] == button.index);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: direction, state: 'UP' });\r\n\t\t\tthis.players[pad.index].interaction.released = direction;\r\n\t\t\tthis.players[pad.index].interaction.lastReleased = direction;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.released = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastReleased = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Some gamepads map dpads to axis. Here we insert the direction into a buffer that we can use to simulate DPad down/up events\r\n\t * \r\n\t */\r\n\tgamepadFakeDPadPress(gamepad, direction) {\r\n\t\tif (this.players[gamepad.index].internal.fakedpadBuffer != direction) {\r\n\t\t\tthis.players[gamepad.index].internal.fakedpadBuffer = direction;\r\n\t\t\tthis.players[gamepad.index].internal.fakedpadPressed = direction;\r\n\t\t\t\r\n\t\t\tlet thisButton = new Phaser.Input.Gamepad.Button(gamepad, this.dpadMappings[direction])\r\n\t\t\tthisButton.value = 1;\r\n\t\t\tthisButton.pressed = true;\r\n\t\t\tthisButton.events.emit('down', gamepad, thisButton, 1)\r\n\t\t\tthis.systems.input.gamepad.emit('down', gamepad, thisButton, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tgamepadFakeDPadRelease(gamepad) {\r\n\t\tif (this.players[gamepad.index].internal.fakedpadBuffer != '') {\r\n\t\t\tlet direction = this.players[gamepad.index].internal.fakedpadBuffer;\r\n\t\t\tthis.players[gamepad.index].internal.fakedpadReleased = direction;\r\n\r\n\t\t\tlet thisButton = new Phaser.Input.Gamepad.Button(gamepad, this.dpadMappings[direction])\r\n\t\t\tthisButton.value = 0;\r\n\t\t\tthisButton.pressed = false;\r\n\t\t\tthisButton.events.emit('up', gamepad, thisButton, 0)\r\n\t\t\tthis.systems.input.gamepad.emit('up', gamepad, thisButton, 0);\t\t\t\r\n\r\n\t\t\tthis.players[gamepad.index].internal.fakedpadBuffer = '';\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Iterate through gamepads and handle interactions\r\n\t */\r\n\tcheckGamepadInput() {\r\n\t\t// Check for gamepad input\r\n\t\tfor (var thisGamepad of this.gamepads) {\r\n\r\n\t\t\t// Set up a player if we don't have one, presumably due to race conditions in detecting gamepads\r\n\t\t\tif (typeof this.players[thisGamepad.index] === 'undefined') {\r\n\t\t\t\tthis.addPlayer();\r\n\t\t\t}\r\n\r\n\t\t\tlet direction = '';\r\n\r\n\t\t\t// Directions\r\n\t\t\tif (thisGamepad.leftStick.y < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.UP = Math.abs(thisGamepad.leftStick.y)\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'UP');\r\n\t\t\t\t\tdirection = 'UP'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.leftStick.y > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.DOWN = thisGamepad.leftStick.y\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'DOWN');\r\n\t\t\t\t\tdirection = 'DOWN'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// DPad\r\n\t\t\t\tthis.players[thisGamepad.index].direction.UP = thisGamepad.up ? 1 : 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction.DOWN = thisGamepad.down ? 1 : 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (thisGamepad.leftStick.x < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.LEFT = Math.abs(thisGamepad.leftStick.x)\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'LEFT');\r\n\t\t\t\t\tdirection = 'LEFT'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.leftStick.x > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.RIGHT = thisGamepad.leftStick.x\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'RIGHT');\r\n\t\t\t\t\tdirection = 'RIGHT'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// DPad\r\n\t\t\t\tthis.players[thisGamepad.index].direction.LEFT = thisGamepad.left ? 1 : 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction.RIGHT = thisGamepad.right ? 1 : 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (thisGamepad.fakedpad && direction == '') {\r\n\t\t\t\tthis.gamepadFakeDPadRelease(thisGamepad);\r\n\t\t\t}\r\n\r\n\t\t\t// Secondary\r\n\t\t\tif (thisGamepad.rightStick.y < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.UP = Math.abs(thisGamepad.rightStick.y)\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.rightStick.y > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.DOWN = thisGamepad.rightStick.y\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.UP = 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.DOWN = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (thisGamepad.rightStick.x < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.LEFT = Math.abs(thisGamepad.rightStick.x)\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.rightStick.x > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.RIGHT = thisGamepad.rightStick.x\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.LEFT = 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.RIGHT = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// Buttons\r\n\t\t\t\tfor (var b = 0; b < thisGamepad.buttons.length; b++) {\r\n\t\t\t\t\tlet button = thisGamepad.buttons[b];\r\n\t\t\t\t\tthis.players[thisGamepad.index].buttons['B' + b] = button.value;\r\n\r\n\t\t\t\t\t// Get mapped name for this button number and artificially update the relevant buttons_mapped key\r\n\t\t\t\t\tlet mappedButton = this.getMappedButton(this.players[thisGamepad.index], b);\r\n\t\t\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons_mapped[mappedButton] = button.value;\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer move.\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerMove(pointer, threshold) {\r\n\t\tthreshold = threshold || 0;\r\n\t\tif (pointer.distance > threshold) {\r\n\t\t\tlet pointerDirection = this.getBearingFromAngle(pointer.angle, 8);\r\n\r\n\t\t\t// If we've been given a player position, return bearings and angles\r\n\t\t\tif (typeof this.players[0] !== 'undefined' && this.players[0].position.x !== 'undefined') {\r\n\t\t\t\tlet position = this.players[0].position;\r\n\t\t\t\tlet angleToPointer = Phaser.Math.Angle.Between(position.x, position.y, pointer.worldX, pointer.worldY);\r\n\t\t\t\tpointerDirection = this.getBearingFromAngle(angleToPointer, 8);\r\n\t\t\t\tlet pointerAngle = Number(this.mapBearingToDegrees(pointerDirection));\r\n\r\n\t\t\t\tthis.players[0].pointer.BEARING = pointerDirection;\r\n\t\t\t\tthis.players[0].pointer.ANGLE = angleToPointer;\r\n\t\t\t\tthis.players[0].pointer.BEARING_DEGREES = pointerAngle;\r\n\t\t\t\tthis.players[0].pointer.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer down. Indicates that Mx has been pressed, which should be listened to by the player object\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerDown(pointer) {\r\n\t\tlet action = '';\r\n\t\tthis.players[0].interaction.device = 'pointer';\r\n\t\tif (pointer.leftButtonDown()) {\r\n\t\t\taction = 'M1';\r\n\t\t}\r\n\t\tif (pointer.rightButtonDown()) {\r\n\t\t\taction = 'M2';\r\n\t\t}\r\n\t\tif (pointer.middleButtonDown()) {\r\n\t\t\taction = 'M3';\r\n\t\t}\r\n\t\tif (pointer.backButtonDown()) {\r\n\t\t\taction = 'M4';\r\n\t\t}\r\n\t\tif (pointer.forwardButtonDown()) {\r\n\t\t\taction = 'M5';\r\n\t\t}\r\n\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'pointer', value: 1, player: 0, action: action, state: 'DOWN' });\r\n\r\n\t\tthis.players[0].pointer[action] = 1;\r\n\r\n\t\t// Update the last button state\r\n\t\tthis.players[0].interaction.pressed = action;\r\n\t\tthis.players[0].interaction.last = action;\r\n\t\tthis.players[0].interaction.lastPressed = action;\r\n\t\tthis.players[0].interaction.buffer = action;\r\n\t\tthis.players[0].pointer.TIMESTAMP = pointer.moveTime;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer up. Indicates that Mx has been released, which should be listened to by the player object\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerUp(pointer) {\r\n\t\tlet action = '';\r\n\t\tif (pointer.leftButtonReleased()) {\r\n\t\t\taction = 'M1';\r\n\t\t}\r\n\t\tif (pointer.rightButtonReleased()) {\r\n\t\t\taction = 'M2';\r\n\t\t}\r\n\t\tif (pointer.middleButtonReleased()) {\r\n\t\t\taction = 'M3';\r\n\t\t}\r\n\t\tif (pointer.backButtonReleased()) {\r\n\t\t\taction = 'M4';\r\n\t\t}\r\n\t\tif (pointer.forwardButtonReleased()) {\r\n\t\t\taction = 'M5';\r\n\t\t}\r\n\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'pointer', value: 1, player: 0, action: action, state: 'UP' });\r\n\r\n\t\tthis.players[0].pointer[action] = 0;\r\n\t\tthis.players[0].interaction.released = action;\r\n\t\tthis.players[0].interaction.lastReleased = action;\r\n\t\tthis.players[0].pointer.TIMESTAMP = this.scene.sys.time.now;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Get the bearing from a given angle\r\n\t * @param {float} angle - Angle to use\r\n\t * @param {number} numDirections - Number of possible directions (e.g. 4 for N/S/E/W)\r\n\t */\r\n\tgetBearingFromAngle(angle, numDirections) {\r\n\t\tnumDirections = numDirections || 8;\r\n\r\n\t\tvar snap_interval = Phaser.Math.PI2 / numDirections;\r\n\r\n\t\tvar angleSnap = Phaser.Math.Snap.To(angle, snap_interval);\r\n\t\tvar angleSnapDeg = Phaser.Math.RadToDeg(angleSnap);\r\n\t\tvar angleSnapDir = this.bearings[angleSnapDeg];\r\n\r\n\t\treturn angleSnapDir;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Given a bearing, return a direction object containing boolean flags for the four directions\r\n\t * @param {*} bearing\r\n\t */\r\n\tmapBearingToDirections(bearing) {\r\n\t\tlet thisDirection = {\r\n\t\t\t'UP': 0,\r\n\t\t\t'DOWN': 0,\r\n\t\t\t'LEFT': 0,\r\n\t\t\t'RIGHT': 0,\r\n\t\t\t'BEARING': bearing.toUpperCase()\r\n\t\t}\r\n\r\n\t\tif (bearing.toUpperCase().includes('W')) {\r\n\t\t\tthisDirection.LEFT = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('E')) {\r\n\t\t\tthisDirection.RIGHT = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('S')) {\r\n\t\t\tthisDirection.DOWN = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('N')) {\r\n\t\t\tthisDirection.UP = 1;\r\n\t\t}\r\n\r\n\t\treturn thisDirection;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Given a directions object, return the applicable bearing (8 way only)\r\n\t * @param {*} directions\r\n\t */\r\n\tmapDirectionsToBearing(directions, threshold) {\r\n\t\tvar threshold = threshold || -.5\r\n\t\tif (directions.UP && !(directions.LEFT || directions.RIGHT)) {\r\n\t\t\treturn 'N';\r\n\t\t}\r\n\t\tif (directions.RIGHT && directions.UP) {\r\n\t\t\treturn 'NE';\r\n\t\t}\r\n\t\tif (directions.RIGHT && !(directions.UP || directions.DOWN)) {\r\n\t\t\treturn 'E';\r\n\t\t}\r\n\t\tif (directions.RIGHT && directions.DOWN) {\r\n\t\t\treturn 'SE';\r\n\t\t}\r\n\t\tif (directions.DOWN && !(directions.LEFT || directions.RIGHT)) {\r\n\t\t\treturn 'S';\r\n\t\t}\r\n\t\tif (directions.LEFT && directions.DOWN) {\r\n\t\t\treturn 'SW';\r\n\t\t}\r\n\t\tif (directions.LEFT && !(directions.UP || directions.DOWN)) {\r\n\t\t\treturn 'W';\r\n\t\t}\r\n\t\tif (directions.LEFT && directions.UP) {\r\n\t\t\treturn 'NW';\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\r\n\t/**\r\n\t * Given a bearing, return the snapped angle in degrees\r\n\t * @param {*} bearing\r\n\t */\r\n\tmapBearingToDegrees(bearing) {\r\n\t\tif (bearing != '') {\r\n\t\t\treturn Object.keys(this.bearings).find(key => this.bearings[key] === bearing);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn '';\r\n\t\t}\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tthis.shutdown();\r\n\t\tthis.scene = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Return debug object\r\n\t */\r\n\tdebug() {\r\n\t\t// Debug variables\r\n\t\tvar debug = {\r\n\t\t\t'input': {}\r\n\t\t};\r\n\t\tdebug.input.gamepads = [];\r\n\t\t\r\n\t\tfor (var i = 0; i < this.gamepads.length; i++) {\r\n\t\t\tlet pad = this.gamepads[i];\r\n\t\t\tlet buttons = {};\r\n\t\t\tlet axes = {};\r\n\r\n\t\t\tfor (var b = 0; b < pad.buttons.length; b++) {\r\n\t\t\t\tlet button = pad.buttons[b];\r\n\t\t\t\tbuttons['B' + button.index] = button.value;\r\n\t\t\t}\r\n\r\n\t\t\tfor (var a = 0; a < pad.axes.length; a++) {\r\n\t\t\t\tlet axis = pad.axes[a];\r\n\t\t\t\taxes['A' + axis.index] = axis.getValue();\r\n\t\t\t}\r\n\r\n\t\t\tdebug.input.gamepads.push({\r\n\t\t\t\t'ID': pad.id,\r\n\t\t\t\t'Index': pad.index,\r\n\t\t\t\t'Buttons': buttons,\r\n\t\t\t\t'Axes': axes\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tdebug.players = [];\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\tdebug.players.push({\r\n\t\t\t\t'interaction': thisPlayer.interaction,\r\n\t\t\t\t'interaction_mapped': thisPlayer.interaction_mapped,\r\n//\t\t\t\t'device': thisPlayer.interaction.device,\r\n\t\t\t\t'buttons': thisPlayer.buttons,\r\n\t\t\t\t'buttons_mapped': thisPlayer.buttons_mapped,\r\n\t\t\t\t'interaction_mapped': thisPlayer.interaction_mapped,\r\n\t\t\t\t'pointer': thisPlayer.pointer,\r\n\t\t\t\t'direction': thisPlayer.direction,\r\n\t\t\t\t'direction_secondary': thisPlayer.direction_secondary,\r\n\t\t\t\t'keys': thisPlayer.keys\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn debug;\r\n\t}\r\n}\r\n","const bearings = {\r\n    '-180': 'W',\r\n    '-168.75': 'WBN',\r\n    '-157.5': 'WNW',\r\n    '-146.25': 'NWBW',\r\n    '-135': 'NW',\r\n    '-123.75': 'NWBN',\r\n    '-112.5': 'NNW',\r\n    '-101.25': 'NBW',\r\n    '-90': 'N',\r\n    '-78.75': 'NBE',\r\n    '-67.5': 'NNE',\r\n    '-56.25': 'NEBN',\r\n    '-45': 'NE',\r\n    '-33.75': 'NEBE',\r\n    '-22.5': 'EBE',\r\n    '-11.25': 'EBN',\r\n    '0': 'E',\r\n    '11.25': 'EBS',\r\n    '22.5': 'ESE',\r\n    '33.75': 'SEBE',\r\n    '45': 'SE',\r\n    '56.25': 'SEBS',\r\n    '67.5': 'SSE',\r\n    '78.75': 'SBE',\r\n    '90': 'S',\r\n    '101.25': 'SBW',\r\n    '112.5': 'SSW',\r\n    '123.75': 'SWBS',\r\n    '135': 'SW',\r\n    '146.25': 'SWBW',\r\n    '157.5': 'WSW',\r\n    '168.75': 'WBS',\r\n    '180': 'W'\r\n};\r\n\r\nmodule.exports = bearings;","import pad_generic from './configs/pad_generic'\r\nimport pad_unlicensedSNES from './configs/pad_unlicensedSNES'\r\nimport pad_xbox360 from './configs/pad_xbox360'\r\nimport pad_dualshock from './configs/pad_dualshock'\r\n\r\nexport default class controlManager {\r\n    constructor (){\r\n    }\r\n\r\n    mapGamepad(id) {\r\n        id = id.toLowerCase();\r\n        let padConfig = pad_generic;\r\n\r\n        if (id.includes('081f') && id.includes('e401')) {\r\n            padConfig = pad_unlicensedSNES;\r\n        }\r\n        else if (id.includes('xbox') && id.includes('360')) {\r\n            padConfig = pad_xbox360;\r\n        }\r\n        else if (id.includes('054c')) {\r\n            padConfig = pad_dualshock;\r\n        }\r\n        else {\r\n            \r\n        }\r\n\r\n        return padConfig;\r\n    }\r\n\r\n    getBaseControls() {\r\n        return {\r\n            'direction': {\r\n                'UP': 0,\r\n                'DOWN': 0,\r\n                'LEFT': 0,\r\n                'RIGHT': 0,\r\n                'BEARING': '',\r\n                'BEARING_LAST': '',\r\n                'DEGREES': 0,\r\n                'DEGREES_LAST': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'direction_secondary': {\r\n                'UP': 0,\r\n                'DOWN': 0,\r\n                'LEFT': 0,\r\n                'RIGHT': 0,\r\n                'BEARING': '',\r\n                'DEGREES': 0,\r\n                'BEARING_LAST': '',\r\n                'DEGREES_LAST': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'buttons': {},\r\n            'gamepadMapping': {\r\n                RC_S: 0,\r\n                RC_E: 1,\r\n                RC_W: 2,\r\n                RC_N: 3,\r\n                START: 9,\r\n                SELECT: 8,\r\n                LB: 4,\r\n                RB: 5,\r\n                LT: 6,\r\n                RT: 7,\r\n                LS: 10,\r\n                RS: 11,\r\n                LC_N: 12,\r\n                LC_S: 13,\r\n                LC_W: 14,\r\n                LC_E: 15,\r\n                MENU: 16\r\n            },\r\n            'pointer': {\r\n                'M1': 0,\r\n                'M2': 0,\r\n                'M3': 0,\r\n                'M4': 0,\r\n                'M5': 0,\r\n                'BEARING': '',\r\n                'BEARING_DEGREES': 0,\r\n                'ANGLE': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'position': {},\r\n            'gamepad': {},\r\n            'keys': {\r\n                'UP': [],\r\n                'DOWN': [],\r\n                'LEFT': [],\r\n                'RIGHT': [],\r\n            },\r\n            'internal': {\r\n                'fakedpadBuffer': '',\r\n                'fakedpadPressed': '',\r\n                'fakedpadReleased': '',\r\n            },\r\n            'interaction': {\r\n                'buffer': '',\r\n                'pressed': '',\r\n                'released': '',\r\n                'last': '',\r\n                'lastPressed': '',\r\n                'lastReleased': '',\r\n                'device': '',\r\n            },\r\n            'interaction_mapped': {\r\n                'pressed': '',\r\n                'released': '',\r\n                'last': '',\r\n                'lastPressed': '',\r\n                'lastReleased': '',\r\n                'gamepadType': '',\r\n            },\r\n            'buttons_mapped': {\r\n                RC_S: 0,\r\n                RC_E: 0,\r\n                RC_W: 0,\r\n                RC_N: 0,\r\n                START: 0,\r\n                SELECT: 0,\r\n                MENU: 0,\r\n                LB: 0,\r\n                RB: 0,\r\n                LT: 0,\r\n                RT: 0,\r\n                LS: 0,\r\n                RS: 0,\r\n                LC_N: 0,\r\n                LC_S: 0,\r\n                LC_W: 0,\r\n                LC_E: 0,\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Returns a struct to hold input control information\r\n     * Set up a struct for each player in the game\r\n     * Direction and Buttons contain the input from the devices\r\n     * The keys struct contains arrays of keyboard characters that will trigger the action\r\n     */\r\n    setupControls(numberOfButtons) {\r\n        numberOfButtons = numberOfButtons || 16;\r\n\r\n        let controls = this.getBaseControls();\r\n\r\n        // Add buttons\r\n        for (let i = 0; i <= numberOfButtons; i++) {\r\n            controls.buttons['B' + i] = 0;\r\n            controls.keys['B' + i] = [];\r\n        }\r\n\r\n        return controls;\r\n    }\r\n\r\n\r\n}\r\n","/**\r\n * Generic pad mapping\r\n */\r\nmodule.exports = {\r\n    padID: 'Generic',\r\n    padType: 'generic',\r\n    gamepadMapping: {\r\n        RC_S: 0,\r\n        RC_E: 1,\r\n        RC_W: 2,\r\n        RC_N: 3,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LT: 6,\r\n        RT: 7,\r\n        LS: 10,\r\n        RS: 11,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15\r\n    },\r\n}","/**\r\n * 081f-e401 - UnlicensedSNES\r\n */\r\nmodule.exports = {\r\n    padID: '081f-e401',\r\n    padType: 'snes',\r\n    gamepadMapping : {\r\n        RC_S: 2,\r\n        RC_E: 1,\r\n        RC_W: 3,\r\n        RC_N: 0,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15\r\n    }\r\n}","/**\r\n * Generic pad mapping\r\n */\r\nmodule.exports = {\r\n    padID: 'Xbox 360 controller (XInput STANDARD GAMEPAD)',\r\n    padType: 'xbox',\r\n    gamepadMapping: {\r\n        RC_S: 0,\r\n        RC_E: 1,\r\n        RC_W: 2,\r\n        RC_N: 3,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LT: 6,\r\n        RT: 7,\r\n        LS: 10,\r\n        RS: 11,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15,\r\n        MENU: 16\r\n    },\r\n}","/**\r\n * Dualshock mapping\r\n */\r\nmodule.exports = {\r\n    padID: 'Dualshock',\r\n    padType: 'Sony',\r\n    gamepadMapping: {\r\n        RC_S: 0,\r\n        RC_E: 1,\r\n        RC_W: 2,\r\n        RC_N: 3,\r\n        START: 9, // Options\r\n        SELECT: 8, // Share\r\n        LB: 4,\r\n        RB: 5,\r\n        LT: 6,\r\n        RT: 7,\r\n        LS: 10,\r\n        RS: 11,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15,\r\n        MENU: 16,\r\n        TOUCH: 17\r\n    },\r\n}"],"sourceRoot":""}