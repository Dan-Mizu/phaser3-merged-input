{"version":3,"sources":["webpack://MergedInput/webpack/universalModuleDefinition","webpack://MergedInput/webpack/bootstrap","webpack://MergedInput/./main.js","webpack://MergedInput/./configs/bearings.js","webpack://MergedInput/./controlManager.js","webpack://MergedInput/./configs/pad_generic.js","webpack://MergedInput/./configs/pad_unlicensedSNES.js","webpack://MergedInput/./configs/pad_xbox360.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","m","MergedInput","Phaser","Plugins","ScenePlugin","this","eventEmitter","systems","events","on","preupdate","postupdate","input","gamepad","thisGamepad","refreshGamepads","setupGamepad","refreshPads","total","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","gamepads","Symbol","iterator","next","done","value","emit","err","return","gamepadButtonDown","gamepadButtonUp","keyboard","keyboardKeyDown","keyboardKeyUp","mouse","disableContextMenu","pointer","pointerMove","pointerDown","pointerUp","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","players","thisPlayer","BEARING","BEARING_DEGREES","ANGLE","direction","mapDirectionsToBearing","BEARING_LAST","DEGREES","parseFloat","mapBearingToDegrees","DEGREES_LAST","direction_secondary","checkKeyboardInput","checkGamepadInput","checkPointerInput","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","clearBuffer","interaction","pressed","internal","fakedpadPressed","buffer","interaction_mapped","fakedpadReleased","released","device","id","player","index","action","addPlayer","gamepadID","toLowerCase","mappedPad","controlManager","mapGamepad","thisButton","gamepadMapping","gamepadType","padType","buttons_mapped","filter","el","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","entries","_step4$value","_slicedToArray","fakedpad","buttons","length","numberOfButtons","_typeof","Number","isInteger","push","setupControls","key","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","thisKey","keys","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","actions","apply","_toConsumableArray","Object","buttonID","toString","replace","find","arguments","append","getPlayerActions","includes","addKey","Input","Keyboard","KeyCodes","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","thisValue","isDown","TIMESTAMP","scene","sys","time","now","event","keyCode","playerIndex","getPlayerIndexFromKey","playerAction","getPlayerButtonFromKey","getPlayer","state","last","lastPressed","dpadMappings","mappedButton","getMappedButton","lastReleased","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","pad","button","dpadMapping","fakedpadBuffer","Gamepad","Button","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","leftStick","y","UP","Math","abs","gamepadFakeDPadPress","DOWN","up","down","x","LEFT","RIGHT","left","right","gamepadFakeDPadRelease","rightStick","b","threshold","distance","pointerDirection","getBearingFromAngle","angle","position","angleToPointer","Angle","Between","worldX","worldY","pointerAngle","leftButtonDown","rightButtonDown","middleButtonDown","backButtonDown","forwardButtonDown","moveTime","leftButtonReleased","rightButtonReleased","middleButtonReleased","backButtonReleased","forwardButtonReleased","numDirections","snap_interval","PI2","angleSnap","Snap","To","angleSnapDeg","RadToDeg","bearings","bearing","thisDirection","toUpperCase","directions","_this2","shutdown","debug","i","axes","a","axis","getValue","ID","Index","Buttons","Axes","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_debug$players$push","_defineProperty","pluginManager","_classCallCheck","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","-180","-168.75","-157.5","-146.25","-135","-123.75","-112.5","-101.25","-90","-78.75","-67.5","-56.25","-45","-33.75","-22.5","-11.25","0","11.25","22.5","33.75","45","56.25","67.5","78.75","90","101.25","112.5","123.75","135","146.25","157.5","168.75","180","padConfig","pad_generic","pad_unlicensedSNES","pad_xbox360","RC_S","RC_E","RC_W","RC_N","START","SELECT","LB","RB","LT","RT","LS","RS","LC_N","LC_S","LC_W","LC_E","MENU","M1","M2","M3","M4","M5","controls","getBaseControls","padID","c","d","name","getter","o","defineProperty","enumerable","get","r","toStringTag","t","mode","__esModule","ns","create","bind","n","object","property","prototype","hasOwnProperty","p","s","moduleId","l","modules"],"mappings":"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","file":"MergedInput.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"MergedInput\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MergedInput\"] = factory();\n\telse\n\t\troot[\"MergedInput\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import bearings from './configs/bearings'\r\nimport controlManager from './controlManager'\r\n\r\nexport default class MergedInput extends Phaser.Plugins.ScenePlugin {\r\n\r\n\t/**\r\n\t * The Merged Input plugin is designed to run in the background and handle input.\r\n\t * Upon detecting a keypress or gamepad interaction, the plugin will update a player object and emit global events.\r\n\t *\r\n\t * @extends Phaser.Plugins.ScenePlugin\r\n\t * @param {*} scene\r\n\t * @param {*} pluginManager\r\n\t */\r\n\tconstructor(scene, pluginManager) {\r\n\t\tsuper(scene, pluginManager);\r\n\t\tthis.scene = scene;\r\n\r\n\t\t// Players\r\n\t\tthis.players = [];\r\n\t\t// Gamepads\r\n\t\tthis.gamepads = [];\r\n\t\t// Keys object to store Phaser key objects. We'll check these during update\r\n\t\tthis.keys = {};\r\n\r\n\t\tthis.bearings = bearings;\r\n\r\n\t\tthis.dpadMappings = {\r\n\t\t\t'UP': 12,\r\n\t\t\t'DOWN': 13,\r\n\t\t\t'LEFT': 14,\r\n\t\t\t'RIGHT': 15\r\n\t\t}\r\n\r\n\t\tthis.controlManager = new controlManager()\r\n\t}\r\n\r\n\tboot() {\r\n\t\tthis.eventEmitter = this.systems.events;\r\n\t\tthis.eventEmitter.on('preupdate', this.preupdate, this);\r\n\t\tthis.eventEmitter.on('postupdate', this.postupdate, this);\r\n\r\n\t\t// Gamepad\r\n\t\tif (typeof this.systems.input.gamepad !== 'undefined') {\r\n\t\t\tthis.systems.input.gamepad.on('connected', function (thisGamepad) {\r\n\t\t\t\tthis.refreshGamepads();\r\n\t\t\t\tthis.setupGamepad(thisGamepad)\r\n\t\t\t}, this);\r\n\r\n\t\t\t// Check to see if the gamepad has already been setup by the browser\r\n\t\t\tthis.systems.input.gamepad.refreshPads();\r\n\t\t\tif (this.systems.input.gamepad.total) {\r\n\t\t\t\tthis.refreshGamepads();\r\n\t\t\t\tfor (const thisGamepad of this.gamepads) {\r\n\t\t\t\t\tthis.systems.input.gamepad.emit('connected', thisGamepad);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.systems.input.gamepad.on('down', this.gamepadButtonDown, this);\r\n\t\t\tthis.systems.input.gamepad.on('up', this.gamepadButtonUp, this);\r\n\t\t}\r\n\r\n\t\t// Keyboard\r\n\t\tthis.systems.input.keyboard.on('keydown', this.keyboardKeyDown, this);\r\n\t\tthis.systems.input.keyboard.on('keyup', this.keyboardKeyUp, this);\r\n\r\n\r\n\t\t// Pointer\r\n\t\tthis.systems.input.mouse.disableContextMenu();\r\n\r\n\t\tthis.systems.input.on('pointermove', function (pointer) {\r\n\t\t\tthis.pointerMove(pointer);\r\n\t\t}, this);\r\n\r\n\t\tthis.systems.input.on('pointerdown', function (pointer) {\r\n\t\t\tthis.pointerDown(pointer);\r\n\t\t}, this);\r\n\r\n\t\tthis.systems.input.on('pointerup', function (pointer) {\r\n\t\t\tthis.pointerUp(pointer);\r\n\t\t}, this);\r\n\t}\r\n\r\n\tpreupdate() {\r\n\t\t// Loop through players and handle input\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// If the pointer hasn't moved, and the scene has changed, this can end up as undefined\r\n\t\t\tthisPlayer.pointer.BEARING = typeof thisPlayer.pointer.BEARING != 'undefined' ? thisPlayer.pointer.BEARING : '';\r\n\t\t\tthisPlayer.pointer.BEARING_DEGREES = typeof thisPlayer.pointer.BEARING_DEGREES != 'undefined' ? thisPlayer.pointer.BEARING_DEGREES : 0;\r\n\t\t\tthisPlayer.pointer.ANGLE = typeof thisPlayer.pointer.ANGLE != 'undefined' ? thisPlayer.pointer.ANGLE : '';\r\n\r\n\r\n\t\t\tthisPlayer.direction.BEARING = this.mapDirectionsToBearing(thisPlayer.direction);\r\n\t\t\tthisPlayer.direction.BEARING_LAST = thisPlayer.direction.BEARING != '' ? thisPlayer.direction.BEARING : thisPlayer.direction.BEARING_LAST;\r\n\t\t\tthisPlayer.direction.DEGREES = thisPlayer.direction.BEARING != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction.BEARING)) : 0;\r\n\t\t\tthisPlayer.direction.DEGREES_LAST = thisPlayer.direction.BEARING_LAST != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction.BEARING_LAST)) : 0;\r\n\t\t\tthisPlayer.direction_secondary.BEARING = this.mapDirectionsToBearing(thisPlayer.direction_secondary);\r\n\t\t\tthisPlayer.direction_secondary.BEARING_LAST = thisPlayer.direction_secondary.BEARING != '' ? thisPlayer.direction_secondary.BEARING : thisPlayer.direction_secondary.BEARING_LAST;\r\n\t\t\tthisPlayer.direction_secondary.DEGREES = thisPlayer.direction_secondary.BEARING != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction_secondary.BEARING)) : 0;\r\n\t\t\tthisPlayer.direction_secondary.DEGREES_LAST = thisPlayer.direction_secondary.BEARING_LAST != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction_secondary.BEARING_LAST)) : 0;\r\n\t\t}\r\n\r\n\t\tthis.checkKeyboardInput();\r\n\t\tthis.checkGamepadInput();\r\n\t\tthis.checkPointerInput();\r\n\t}\r\n\r\n\tpostupdate() {\r\n\t\t// Loop through players and manage buffered input\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Clear the interaction buffer\r\n\t\t\tthis.clearBuffer(thisPlayer);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clear the interaction buffer for the given player\r\n\t * In the case of 'fake' DPad presses, we're using some convoluted buffers to keep the 'pressed' and 'released' values around for an extra tick\r\n\t * As they're created in this update loop, they're otherwise cleared before the consumer can use them.\r\n\t * @param {*} thisPlayer \r\n\t */\r\n\tclearBuffer(thisPlayer) {\r\n\t\tif (thisPlayer.interaction.pressed != '' && thisPlayer.internal.fakedpadPressed == '') {\r\n\t\t\tthisPlayer.interaction.buffer = '';\r\n\t\t}\r\n\t\tif (thisPlayer.interaction.buffer == '') {\r\n\t\t\tthisPlayer.interaction.pressed = '';\r\n\t\t\tthisPlayer.interaction_mapped.pressed = '';\r\n\t\t\tif (thisPlayer.internal.fakedpadReleased == '') {\r\n\t\t\t\tthisPlayer.interaction.released = '';\r\n\t\t\t\tthisPlayer.interaction_mapped.released = '';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthisPlayer.internal.fakedpadPressed = '';\r\n\t\tthisPlayer.internal.fakedpadReleased = '';\r\n\t}\r\n\r\n\t/**\r\n\t * Set up the gamepad and associate with a player object\r\n\t */\r\n\tsetupGamepad(thisGamepad) {\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', id: thisGamepad.id, player: thisGamepad.index, action: 'Connected' });\r\n\r\n\t\tif (typeof this.players[thisGamepad.index] === 'undefined') {\r\n\t\t\tthis.addPlayer();\r\n\t\t}\r\n\t\t\r\n\t\tlet gamepadID = thisGamepad.id.toLowerCase();\r\n\t\tthis.players[thisGamepad.index].gamepad = thisGamepad;\r\n\r\n\t\t// Map the gamepad buttons\r\n\t\tlet mappedPad = this.controlManager.mapGamepad(gamepadID);\r\n\t\tthis.players[thisGamepad.index].gamepadMapping = mappedPad.gamepadMapping;\r\n\t\tthis.players[thisGamepad.index].interaction_mapped.gamepadType = mappedPad.padType;\r\n\t\tfor (let thisButton in this.players[thisGamepad.index].gamepadMapping) {\r\n\t\t\tthis.players[thisGamepad.index].buttons_mapped[thisButton] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trefreshGamepads() {\r\n\t\t// Sometimes, gamepads are undefined. For some reason.\r\n\t\tthis.gamepads = this.systems.input.gamepad.gamepads.filter(function (el) {\r\n\t\t\treturn el != null;\r\n\t\t});\r\n\r\n\t\tfor (const [index, thisGamepad] of this.gamepads.entries()) {\r\n\t\t\tthisGamepad.index = index; // Overwrite the gamepad index, in case we had undefined gamepads earlier\r\n\r\n\t\t\t/**\r\n\t\t\t * Some cheap gamepads use the first axis as a dpad, in which case we won't have the dpad buttons 12-15\r\n\t\t\t */\r\n\t\t\tthisGamepad.fakedpad = thisGamepad.buttons.length < 15;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add a new player object to the players array\r\n\t * @param {number} index Player index - if a player object at this index already exists, it will be returned instead of creating a new player object\r\n\t * @param {number} numberOfButtons The number of buttons to assign to the player object. Defaults to 16. Fewer than 16 is not recommended, as gamepad DPads typically map to buttons 12-15\r\n\t */\r\n\taddPlayer(index, numberOfButtons) {\r\n\t\tnumberOfButtons = numberOfButtons || 16;\r\n\t\tif (typeof Number.isInteger(index) && typeof this.players[index] !== 'undefined') {\r\n\t\t\treturn this.players[index];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.players.push(this.controlManager.setupControls(numberOfButtons));\r\n\t\t\tthis.players[this.players.length - 1].index = this.players.length - 1;\r\n\t\t\treturn this.players[this.players.length - 1];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get player object\r\n\t * @param {number} index Player index\r\n\t */\r\n\tgetPlayer(index) {\r\n\t\treturn typeof this.players[index] !== 'undefined' ? this.players[index] : ''\r\n\t}\r\n\r\n\tgetPlayerIndexFromKey(key) {\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\tif (thisValue == key) {\r\n\t\t\t\t\t\treturn thisPlayer.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tgetPlayerButtonFromKey(key) {\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\tif (thisValue == key) {\r\n\t\t\t\t\t\t// Now we have a matching button value, check to see if it's in our mapped buttons, in which case we want to return the button number it matches to\r\n\t\t\t\t\t\tif (typeof thisPlayer.gamepadMapping[thisKey] !== \"undefined\") {\r\n\t\t\t\t\t\t\treturn 'B' + thisPlayer.gamepadMapping[thisKey];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\treturn thisKey;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Return an array of actions that a player may use\r\n\t * @param {number} player \r\n\t * @returns \r\n\t */\r\n\tgetPlayerActions(player) {\r\n\t\tlet actions = ['UP', 'DOWN', 'LEFT', 'RIGHT', 'ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT'];\r\n\t\tactions.push(...Object.keys(this.players[player].gamepadMapping));\r\n\t\tactions.push(...Object.keys(this.players[player].buttons));\r\n\r\n\t\treturn actions;\r\n\t}\r\n\r\n\t/**\r\n\t * Given a player and a button ID, return the mapped button name, e.g. 0 = 'RC_S' (Right cluster, South - X on an xbox gamepad)\r\n\t * @param {*} player \r\n\t * @param {*} buttonID \r\n\t */\r\n\tgetMappedButton(player, buttonID) {\r\n\t\tbuttonID = buttonID.toString().replace(/\\D/g, '');\r\n\t\treturn Object.keys(player.gamepadMapping).find(key => player.gamepadMapping[key] == buttonID);\r\n\t}\r\n\r\n\t// Keyboard functions\r\n\r\n\t/**\r\n\t * Define a key for a player/action combination\r\n\t * @param {number} player The player on which we're defining a key\r\n\t * @param {string} action The action to define\r\n\t * @param {string} value The key to use\r\n\t * @param {boolean} append When true, this key definition will be appended to the existing key(s) for this action\r\n\t */\r\n\tdefineKey(player = 0, action, value, append = false) {\r\n\t\t// Set up a new player if none defined\r\n\t\tif (typeof this.players[player] === 'undefined') {\r\n\t\t\tthis.addPlayer();\r\n\t\t}\r\n\r\n\t\tif (this.getPlayerActions(player).includes(action)) {\r\n\t\t\tif (append && (typeof this.players[player].keys[action] !== 'undefined')) {\r\n\t\t\t\tthis.players[player].keys[action].push([value]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[player].keys[action] = [];\r\n\t\t\t\tthis.players[player].keys[action].push([value]);\r\n\t\t\t}\r\n\r\n\t\t\tthis.keys[[value]] = this.systems.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes[value]);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Iterate through players and check for interaction with defined keys\r\n\t */\r\n\tcheckKeyboardInput() {\r\n\t\t// Loop through players and check for keypresses\r\n\t\tfor (let thisPlayer in this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tlet action = 0;\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\t// Check if the key is down\r\n\t\t\t\t\taction = (this.keys[thisValue].isDown) ? 1 : action;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set the action in the player object\r\n\r\n\t\t\t\t// Dpad\r\n\t\t\t\tif (['UP', 'DOWN', 'LEFT', 'RIGHT'].includes(thisKey)) {\r\n\t\t\t\t\tthisPlayer.direction[thisKey] = action;\r\n\t\t\t\t\tthisPlayer.direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t}\r\n\t\t\t\t// Alternative direction\r\n\t\t\t\telse if (['ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT'].includes(thisKey)) {\r\n\t\t\t\t\tthisPlayer.direction_secondary[thisKey.replace('ALT_', '')] = action;\r\n\t\t\t\t\tif (action == 1) {\r\n\t\t\t\t\t\tthisPlayer.direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Friendly button names\r\n\t\t\t\telse if (thisKey in thisPlayer.gamepadMapping) {\r\n\t\t\t\t\t// Get the button number from the gamepad mapping\r\n\t\t\t\t\tthisPlayer.buttons['B' + thisPlayer.gamepadMapping[thisKey]] = action;\r\n\t\t\t\t\tthisPlayer.buttons_mapped[thisKey] = action;\r\n\t\t\t\t\tif (action == 1) {\r\n\t\t\t\t\t\tthisPlayer.buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Numbered buttons\r\n\t\t\t\telse {\r\n\t\t\t\t\tthisPlayer.buttons[thisKey] = action;\r\n\t\t\t\t\tif (action == 1) {\r\n\t\t\t\t\t\tthisPlayer.buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set the latest interaction flag\r\n\t\t\t\tif (action == 1) {\r\n\t\t\t\t\tthisPlayer.interaction.device = 'keyboard';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a keyboard button is pressed down, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the key, and passes a mapped action and value\r\n\t */\r\n\tkeyboardKeyDown(event) {\r\n\t\tlet keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\r\n\t\tlet playerIndex = this.getPlayerIndexFromKey(keyCode);\r\n\t\tlet playerAction = this.getPlayerButtonFromKey(keyCode);\r\n\r\n\t\tif (playerIndex > -1 && playerAction != '') {\r\n\t\t\tlet thisPlayer = this.getPlayer(playerIndex);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'keyboard', value: 1, player: playerIndex, action: keyCode, state: 'DOWN' });\r\n\r\n\t\t\tthisPlayer.interaction.device = 'keyboard';\r\n\t\t\tthisPlayer.interaction.pressed = playerAction;\r\n\t\t\tthisPlayer.interaction.buffer = playerAction;\r\n\t\t\tthisPlayer.interaction.last = playerAction;\r\n\t\t\tthisPlayer.interaction.lastPressed = playerAction;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tif (typeof this.dpadMappings[playerAction] !== \"undefined\") {\r\n\t\t\t\tplayerAction = 'B' + this.dpadMappings[playerAction];\r\n\t\t\t}\r\n\t\t\tif (typeof thisPlayer.buttons[playerAction] !== \"undefined\") {\r\n\t\t\t\tlet mappedButton = this.getMappedButton(thisPlayer, playerAction);\r\n\t\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\t\tthisPlayer.buttons_mapped[mappedButton] = 1;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.pressed = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.last = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.lastPressed = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.gamepadType = 'keyboard';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a keyboard button is released, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the key, and passes a mapped action and value\r\n\t */\r\n\tkeyboardKeyUp(event) {\r\n\t\tlet keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\r\n\t\tlet playerIndex = this.getPlayerIndexFromKey(keyCode);\r\n\t\tlet playerAction = this.getPlayerButtonFromKey(keyCode);\r\n\r\n\t\tif (playerIndex > -1 && playerAction != '') {\r\n\t\t\tlet thisPlayer = this.getPlayer(playerIndex);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'keyboard', value: 1, player: playerIndex, action: keyCode, state: 'DOWN' });\r\n\r\n\t\t\tthisPlayer.interaction.device = 'keyboard';\r\n\t\t\tthisPlayer.interaction.released = playerAction;\r\n\t\t\tthisPlayer.interaction.lastReleased = playerAction;\r\n\t\t\t\r\n\t\t\t// Update mapped button object\r\n\t\t\tif (typeof this.dpadMappings[playerAction] !== \"undefined\") {\r\n\t\t\t\tplayerAction = 'B' + this.dpadMappings[playerAction];\r\n\t\t\t}\r\n\t\t\tif (typeof thisPlayer.buttons[playerAction] !== \"undefined\") {\r\n\t\t\t\tlet mappedButton = this.getMappedButton(thisPlayer, playerAction);\r\n\t\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\t\tthisPlayer.buttons_mapped[mappedButton] = 0;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.released = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.lastReleased = mappedButton;\r\n\t\t\t\t\tthisPlayer.interaction_mapped.gamepadType = 'keyboard';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Iterate through players and check for interaction with defined pointer buttons\r\n\t */\r\n\tcheckPointerInput() {\r\n\t\t// Loop through players and check for button presses\r\n\t\tfor (let thisPlayer in this.players.entries()) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) { // Each definition for this key action\r\n\t\t\t\t\tif (['M1', 'M2', 'M3', 'M4', 'M5'].includes(thisValue[0])) {\r\n\t\t\t\t\t\t// Check to see if button is pressed (stored in P1, can't have two mice...)\r\n\t\t\t\t\t\tif (this.players[0].pointer[thisValue] == 1) {\r\n\t\t\t\t\t\t\tthisPlayer.buttons[thisKey] = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// Gamepad functions\r\n\r\n\t/**\r\n\t * When a gamepad button is pressed down, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\r\n\t * @param {number} index Button index\r\n\t * @param {number} value Button value\r\n\t * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\r\n\t */\r\n\tgamepadButtonDown(pad, button, value) {\r\n\t\tthis.players[pad.index].interaction.device = 'gamepad';\r\n\t\tthis.players[pad.index].buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: value, player: pad.index, action: 'B' + button.index, state: 'DOWN' });\r\n\r\n\t\t// Buttons\r\n\t\tif (![12, 13, 14, 15].includes(button.index)) {\r\n\t\t\t// Update the last button state\r\n\t\t\tthis.players[pad.index].interaction.pressed = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.last = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.lastPressed = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.buffer = 'B' + button.index;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.pressed = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.last = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastPressed = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t\t// DPad\r\n\t\telse {\r\n\t\t\tlet dpadMapping = this.dpadMappings;\r\n\t\t\tlet direction = Object.keys(dpadMapping).find(key => dpadMapping[key] == button.index);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: direction, state: 'DOWN' });\r\n\t\t\tthis.players[pad.index].interaction.pressed = direction;\r\n\t\t\tthis.players[pad.index].interaction.last = direction;\r\n\t\t\tthis.players[pad.index].interaction.lastPressed = direction;\r\n\t\t\tthis.players[pad.index].interaction.buffer = direction;\r\n\t\t\tthis.players[pad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.pressed = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.last = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastPressed = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a gamepad button is released, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\r\n\t * @param {number} index Button index\r\n\t * @param {number} value Button value\r\n\t * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\r\n\t */\r\n\tgamepadButtonUp(pad, button, value) {\r\n\t\tthis.players[pad.index].interaction.device = 'gamepad';\r\n\t\tthis.players[pad.index].buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: value, player: pad.index, action: 'B' + button.index, state: 'UP' });\r\n\r\n\t\t// Buttons\r\n\t\tif (![12, 13, 14, 15].includes(button.index)) {\r\n\t\t\t// Update the last button state\r\n\t\t\tthis.players[pad.index].interaction.released = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.lastReleased = 'B' + button.index;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.released = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastReleased = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t\t// DPad\r\n\t\telse {\r\n\t\t\tlet dpadMapping = this.dpadMappings;\r\n\t\t\tlet direction = Object.keys(dpadMapping).find(key => dpadMapping[key] == button.index);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: direction, state: 'UP' });\r\n\t\t\tthis.players[pad.index].interaction.released = direction;\r\n\t\t\tthis.players[pad.index].interaction.lastReleased = direction;\r\n\r\n\t\t\t// Update mapped button object\r\n\t\t\tlet mappedButton = this.getMappedButton(this.players[pad.index], button.index);\r\n\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.released = mappedButton;\r\n\t\t\t\tthis.players[pad.index].interaction_mapped.lastReleased = mappedButton;\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Some gamepads map dpads to axis. Here we insert the direction into a buffer that we can use to simulate DPad down/up events\r\n\t * \r\n\t */\r\n\tgamepadFakeDPadPress(gamepad, direction) {\r\n\t\tif (this.players[gamepad.index].internal.fakedpadBuffer != direction) {\r\n\t\t\tthis.players[gamepad.index].internal.fakedpadBuffer = direction;\r\n\t\t\tthis.players[gamepad.index].internal.fakedpadPressed = direction;\r\n\t\t\t\r\n\t\t\tlet thisButton = new Phaser.Input.Gamepad.Button(gamepad, this.dpadMappings[direction])\r\n\t\t\tthisButton.value = 1;\r\n\t\t\tthisButton.pressed = true;\r\n\t\t\tthisButton.events.emit('down', gamepad, thisButton, 1)\r\n\t\t\tthis.systems.input.gamepad.emit('down', gamepad, thisButton, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tgamepadFakeDPadRelease(gamepad) {\r\n\t\tif (this.players[gamepad.index].internal.fakedpadBuffer != '') {\r\n\t\t\tlet direction = this.players[gamepad.index].internal.fakedpadBuffer;\r\n\t\t\tthis.players[gamepad.index].internal.fakedpadReleased = direction;\r\n\r\n\t\t\tlet thisButton = new Phaser.Input.Gamepad.Button(gamepad, this.dpadMappings[direction])\r\n\t\t\tthisButton.value = 0;\r\n\t\t\tthisButton.pressed = false;\r\n\t\t\tthisButton.events.emit('up', gamepad, thisButton, 0)\r\n\t\t\tthis.systems.input.gamepad.emit('up', gamepad, thisButton, 0);\t\t\t\r\n\r\n\t\t\tthis.players[gamepad.index].internal.fakedpadBuffer = '';\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Iterate through gamepads and handle interactions\r\n\t */\r\n\tcheckGamepadInput() {\r\n\t\t// Check for gamepad input\r\n\t\tfor (var thisGamepad of this.gamepads) {\r\n\r\n\t\t\t// Set up a player if we don't have one, presumably due to race conditions in detecting gamepads\r\n\t\t\tif (typeof this.players[thisGamepad.index] === 'undefined') {\r\n\t\t\t\tthis.addPlayer();\r\n\t\t\t}\r\n\r\n\t\t\tlet direction = '';\r\n\r\n\t\t\t// Directions\r\n\t\t\tif (thisGamepad.leftStick.y < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.UP = Math.abs(thisGamepad.leftStick.y)\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'UP');\r\n\t\t\t\t\tdirection = 'UP'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.leftStick.y > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.DOWN = thisGamepad.leftStick.y\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'DOWN');\r\n\t\t\t\t\tdirection = 'DOWN'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// DPad\r\n\t\t\t\tthis.players[thisGamepad.index].direction.UP = thisGamepad.up ? 1 : 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction.DOWN = thisGamepad.down ? 1 : 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (thisGamepad.leftStick.x < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.LEFT = Math.abs(thisGamepad.leftStick.x)\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'LEFT');\r\n\t\t\t\t\tdirection = 'LEFT'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.leftStick.x > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.RIGHT = thisGamepad.leftStick.x\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\r\n\t\t\t\tif (thisGamepad.fakedpad) {\r\n\t\t\t\t\tthis.gamepadFakeDPadPress(thisGamepad, 'RIGHT');\r\n\t\t\t\t\tdirection = 'RIGHT'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// DPad\r\n\t\t\t\tthis.players[thisGamepad.index].direction.LEFT = thisGamepad.left ? 1 : 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction.RIGHT = thisGamepad.right ? 1 : 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (thisGamepad.fakedpad && direction == '') {\r\n\t\t\t\tthis.gamepadFakeDPadRelease(thisGamepad);\r\n\t\t\t}\r\n\r\n\t\t\t// Secondary\r\n\t\t\tif (thisGamepad.rightStick.y < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.UP = Math.abs(thisGamepad.rightStick.y)\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.rightStick.y > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.DOWN = thisGamepad.rightStick.y\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.UP = 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.DOWN = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (thisGamepad.rightStick.x < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.LEFT = Math.abs(thisGamepad.rightStick.x)\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.rightStick.x > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.RIGHT = thisGamepad.rightStick.x\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.LEFT = 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.RIGHT = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// Buttons\r\n\t\t\t\tfor (var b = 0; b < thisGamepad.buttons.length; b++) {\r\n\t\t\t\t\tlet button = thisGamepad.buttons[b];\r\n\t\t\t\t\tthis.players[thisGamepad.index].buttons['B' + b] = button.value;\r\n\r\n\t\t\t\t\t// Get mapped name for this button number and artificially update the relevant buttons_mapped key\r\n\t\t\t\t\tlet mappedButton = this.getMappedButton(this.players[thisGamepad.index], b);\r\n\t\t\t\t\tif (typeof mappedButton !== \"undefined\") {\r\n\t\t\t\t\t\tthis.players[thisGamepad.index].buttons_mapped[mappedButton] = button.value;\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer move.\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerMove(pointer, threshold) {\r\n\t\tthreshold = threshold || 0;\r\n\t\tif (pointer.distance > threshold) {\r\n\t\t\tlet pointerDirection = this.getBearingFromAngle(pointer.angle, 8);\r\n\r\n\t\t\t// If we've been given a player position, return bearings and angles\r\n\t\t\tif (typeof this.players[0] !== 'undefined' && this.players[0].position.x !== 'undefined') {\r\n\t\t\t\tlet position = this.players[0].position;\r\n\t\t\t\tlet angleToPointer = Phaser.Math.Angle.Between(position.x, position.y, pointer.worldX, pointer.worldY);\r\n\t\t\t\tpointerDirection = this.getBearingFromAngle(angleToPointer, 8);\r\n\t\t\t\tlet pointerAngle = Number(this.mapBearingToDegrees(pointerDirection));\r\n\r\n\t\t\t\tthis.players[0].pointer.BEARING = pointerDirection;\r\n\t\t\t\tthis.players[0].pointer.ANGLE = angleToPointer;\r\n\t\t\t\tthis.players[0].pointer.BEARING_DEGREES = pointerAngle;\r\n\t\t\t\tthis.players[0].pointer.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer down. Indicates that Mx has been pressed, which should be listened to by the player object\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerDown(pointer) {\r\n\t\tlet action = '';\r\n\t\tthis.players[0].interaction.device = 'pointer';\r\n\t\tif (pointer.leftButtonDown()) {\r\n\t\t\taction = 'M1';\r\n\t\t}\r\n\t\tif (pointer.rightButtonDown()) {\r\n\t\t\taction = 'M2';\r\n\t\t}\r\n\t\tif (pointer.middleButtonDown()) {\r\n\t\t\taction = 'M3';\r\n\t\t}\r\n\t\tif (pointer.backButtonDown()) {\r\n\t\t\taction = 'M4';\r\n\t\t}\r\n\t\tif (pointer.forwardButtonDown()) {\r\n\t\t\taction = 'M5';\r\n\t\t}\r\n\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'pointer', value: 1, player: 0, action: action, state: 'DOWN' });\r\n\r\n\t\tthis.players[0].pointer[action] = 1;\r\n\r\n\t\t// Update the last button state\r\n\t\tthis.players[0].interaction.pressed = action;\r\n\t\tthis.players[0].interaction.last = action;\r\n\t\tthis.players[0].interaction.lastPressed = action;\r\n\t\tthis.players[0].interaction.buffer = action;\r\n\t\tthis.players[0].pointer.TIMESTAMP = pointer.moveTime;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer up. Indicates that Mx has been released, which should be listened to by the player object\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerUp(pointer) {\r\n\t\tlet action = '';\r\n\t\tif (pointer.leftButtonReleased()) {\r\n\t\t\taction = 'M1';\r\n\t\t}\r\n\t\tif (pointer.rightButtonReleased()) {\r\n\t\t\taction = 'M2';\r\n\t\t}\r\n\t\tif (pointer.middleButtonReleased()) {\r\n\t\t\taction = 'M3';\r\n\t\t}\r\n\t\tif (pointer.backButtonReleased()) {\r\n\t\t\taction = 'M4';\r\n\t\t}\r\n\t\tif (pointer.forwardButtonReleased()) {\r\n\t\t\taction = 'M5';\r\n\t\t}\r\n\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'pointer', value: 1, player: 0, action: action, state: 'UP' });\r\n\r\n\t\tthis.players[0].pointer[action] = 0;\r\n\t\tthis.players[0].interaction.released = action;\r\n\t\tthis.players[0].interaction.lastReleased = action;\r\n\t\tthis.players[0].pointer.TIMESTAMP = this.scene.sys.time.now;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Get the bearing from a given angle\r\n\t * @param {float} angle - Angle to use\r\n\t * @param {number} numDirections - Number of possible directions (e.g. 4 for N/S/E/W)\r\n\t */\r\n\tgetBearingFromAngle(angle, numDirections) {\r\n\t\tnumDirections = numDirections || 8;\r\n\r\n\t\tvar snap_interval = Phaser.Math.PI2 / numDirections;\r\n\r\n\t\tvar angleSnap = Phaser.Math.Snap.To(angle, snap_interval);\r\n\t\tvar angleSnapDeg = Phaser.Math.RadToDeg(angleSnap);\r\n\t\tvar angleSnapDir = this.bearings[angleSnapDeg];\r\n\r\n\t\treturn angleSnapDir;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Given a bearing, return a direction object containing boolean flags for the four directions\r\n\t * @param {*} bearing\r\n\t */\r\n\tmapBearingToDirections(bearing) {\r\n\t\tlet thisDirection = {\r\n\t\t\t'UP': 0,\r\n\t\t\t'DOWN': 0,\r\n\t\t\t'LEFT': 0,\r\n\t\t\t'RIGHT': 0,\r\n\t\t\t'BEARING': bearing.toUpperCase()\r\n\t\t}\r\n\r\n\t\tif (bearing.toUpperCase().includes('W')) {\r\n\t\t\tthisDirection.LEFT = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('E')) {\r\n\t\t\tthisDirection.RIGHT = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('S')) {\r\n\t\t\tthisDirection.DOWN = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('N')) {\r\n\t\t\tthisDirection.UP = 1;\r\n\t\t}\r\n\r\n\t\treturn thisDirection;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Given a directions object, return the applicable bearing (8 way only)\r\n\t * @param {*} directions\r\n\t */\r\n\tmapDirectionsToBearing(directions, threshold) {\r\n\t\tvar threshold = threshold || -.5\r\n\t\tif (directions.UP && !(directions.LEFT || directions.RIGHT)) {\r\n\t\t\treturn 'N';\r\n\t\t}\r\n\t\tif (directions.RIGHT && directions.UP) {\r\n\t\t\treturn 'NE';\r\n\t\t}\r\n\t\tif (directions.RIGHT && !(directions.UP || directions.DOWN)) {\r\n\t\t\treturn 'E';\r\n\t\t}\r\n\t\tif (directions.RIGHT && directions.DOWN) {\r\n\t\t\treturn 'SE';\r\n\t\t}\r\n\t\tif (directions.DOWN && !(directions.LEFT || directions.RIGHT)) {\r\n\t\t\treturn 'S';\r\n\t\t}\r\n\t\tif (directions.LEFT && directions.DOWN) {\r\n\t\t\treturn 'SW';\r\n\t\t}\r\n\t\tif (directions.LEFT && !(directions.UP || directions.DOWN)) {\r\n\t\t\treturn 'W';\r\n\t\t}\r\n\t\tif (directions.LEFT && directions.UP) {\r\n\t\t\treturn 'NW';\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\r\n\t/**\r\n\t * Given a bearing, return the snapped angle in degrees\r\n\t * @param {*} bearing\r\n\t */\r\n\tmapBearingToDegrees(bearing) {\r\n\t\tif (bearing != '') {\r\n\t\t\treturn Object.keys(this.bearings).find(key => this.bearings[key] === bearing);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn '';\r\n\t\t}\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tthis.shutdown();\r\n\t\tthis.scene = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Return debug object\r\n\t */\r\n\tdebug() {\r\n\t\t// Debug variables\r\n\t\tvar debug = {\r\n\t\t\t'input': {}\r\n\t\t};\r\n\t\tdebug.input.gamepads = [];\r\n\t\t\r\n\t\tfor (var i = 0; i < this.gamepads.length; i++) {\r\n\t\t\tlet pad = this.gamepads[i];\r\n\t\t\tlet buttons = {};\r\n\t\t\tlet axes = {};\r\n\r\n\t\t\tfor (var b = 0; b < pad.buttons.length; b++) {\r\n\t\t\t\tlet button = pad.buttons[b];\r\n\t\t\t\tbuttons['B' + button.index] = button.value;\r\n\t\t\t}\r\n\r\n\t\t\tfor (var a = 0; a < pad.axes.length; a++) {\r\n\t\t\t\tlet axis = pad.axes[a];\r\n\t\t\t\taxes['A' + axis.index] = axis.getValue();\r\n\t\t\t}\r\n\r\n\t\t\tdebug.input.gamepads.push({\r\n\t\t\t\t'ID': pad.id,\r\n\t\t\t\t'Index': pad.index,\r\n\t\t\t\t'Buttons': buttons,\r\n\t\t\t\t'Axes': axes\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tdebug.players = [];\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\tdebug.players.push({\r\n\t\t\t\t'interaction': thisPlayer.interaction,\r\n\t\t\t\t'interaction_mapped': thisPlayer.interaction_mapped,\r\n//\t\t\t\t'device': thisPlayer.interaction.device,\r\n\t\t\t\t'buttons': thisPlayer.buttons,\r\n\t\t\t\t'buttons_mapped': thisPlayer.buttons_mapped,\r\n\t\t\t\t'interaction_mapped': thisPlayer.interaction_mapped,\r\n\t\t\t\t'pointer': thisPlayer.pointer,\r\n\t\t\t\t'direction': thisPlayer.direction,\r\n\t\t\t\t'direction_secondary': thisPlayer.direction_secondary,\r\n\t\t\t\t'keys': thisPlayer.keys\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn debug;\r\n\t}\r\n}\r\n","const bearings = {\r\n    '-180': 'W',\r\n    '-168.75': 'WBN',\r\n    '-157.5': 'WNW',\r\n    '-146.25': 'NWBW',\r\n    '-135': 'NW',\r\n    '-123.75': 'NWBN',\r\n    '-112.5': 'NNW',\r\n    '-101.25': 'NBW',\r\n    '-90': 'N',\r\n    '-78.75': 'NBE',\r\n    '-67.5': 'NNE',\r\n    '-56.25': 'NEBN',\r\n    '-45': 'NE',\r\n    '-33.75': 'NEBE',\r\n    '-22.5': 'EBE',\r\n    '-11.25': 'EBN',\r\n    '0': 'E',\r\n    '11.25': 'EBS',\r\n    '22.5': 'ESE',\r\n    '33.75': 'SEBE',\r\n    '45': 'SE',\r\n    '56.25': 'SEBS',\r\n    '67.5': 'SSE',\r\n    '78.75': 'SBE',\r\n    '90': 'S',\r\n    '101.25': 'SBW',\r\n    '112.5': 'SSW',\r\n    '123.75': 'SWBS',\r\n    '135': 'SW',\r\n    '146.25': 'SWBW',\r\n    '157.5': 'WSW',\r\n    '168.75': 'WBS',\r\n    '180': 'W'\r\n};\r\n\r\nmodule.exports = bearings;","import pad_generic from './configs/pad_generic'\r\nimport pad_unlicensedSNES from './configs/pad_unlicensedSNES'\r\nimport pad_xbox360 from './configs/pad_xbox360'\r\n\r\nexport default class controlManager {\r\n    constructor (){\r\n    }\r\n\r\n    mapGamepad(id) {\r\n        id = id.toLowerCase();\r\n        let padConfig = pad_generic;\r\n\r\n        if (id.includes('081f') && id.includes('e401')) {\r\n            padConfig = pad_unlicensedSNES;\r\n        }\r\n        else if (id.includes('xbox') && id.includes('360')) {\r\n            padConfig = pad_xbox360;\r\n        }\r\n        else {\r\n            \r\n        }\r\n\r\n        return padConfig;\r\n    }\r\n\r\n    getBaseControls() {\r\n        return {\r\n            'direction': {\r\n                'UP': 0,\r\n                'DOWN': 0,\r\n                'LEFT': 0,\r\n                'RIGHT': 0,\r\n                'BEARING': '',\r\n                'BEARING_LAST': '',\r\n                'DEGREES': 0,\r\n                'DEGREES_LAST': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'direction_secondary': {\r\n                'UP': 0,\r\n                'DOWN': 0,\r\n                'LEFT': 0,\r\n                'RIGHT': 0,\r\n                'BEARING': '',\r\n                'DEGREES': 0,\r\n                'BEARING_LAST': '',\r\n                'DEGREES_LAST': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'buttons': {},\r\n            'gamepadMapping': {\r\n                RC_S: 0,\r\n                RC_E: 1,\r\n                RC_W: 2,\r\n                RC_N: 3,\r\n                START: 9,\r\n                SELECT: 8,\r\n                LB: 4,\r\n                RB: 5,\r\n                LT: 6,\r\n                RT: 7,\r\n                LS: 10,\r\n                RS: 11,\r\n                LC_N: 12,\r\n                LC_S: 13,\r\n                LC_W: 14,\r\n                LC_E: 15,\r\n                MENU: 16\r\n            },\r\n            'pointer': {\r\n                'M1': 0,\r\n                'M2': 0,\r\n                'M3': 0,\r\n                'M4': 0,\r\n                'M5': 0,\r\n                'BEARING': '',\r\n                'BEARING_DEGREES': 0,\r\n                'ANGLE': 0,\r\n                'TIMESTAMP': 0\r\n            },\r\n            'position': {},\r\n            'gamepad': {},\r\n            'keys': {\r\n                'UP': [],\r\n                'DOWN': [],\r\n                'LEFT': [],\r\n                'RIGHT': [],\r\n            },\r\n            'internal': {\r\n                'fakedpadBuffer': '',\r\n                'fakedpadPressed': '',\r\n                'fakedpadReleased': '',\r\n            },\r\n            'interaction': {\r\n                'buffer': '',\r\n                'pressed': '',\r\n                'released': '',\r\n                'last': '',\r\n                'lastPressed': '',\r\n                'lastReleased': '',\r\n                'device': '',\r\n            },\r\n            'interaction_mapped': {\r\n                'pressed': '',\r\n                'released': '',\r\n                'last': '',\r\n                'lastPressed': '',\r\n                'lastReleased': '',\r\n                'gamepadType': '',\r\n            },\r\n            'buttons_mapped': {\r\n                RC_S: 0,\r\n                RC_E: 0,\r\n                RC_W: 0,\r\n                RC_N: 0,\r\n                START: 0,\r\n                SELECT: 0,\r\n                MENU: 0,\r\n                LB: 0,\r\n                RB: 0,\r\n                LT: 0,\r\n                RT: 0,\r\n                LS: 0,\r\n                RS: 0,\r\n                LC_N: 0,\r\n                LC_S: 0,\r\n                LC_W: 0,\r\n                LC_E: 0,\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Returns a struct to hold input control information\r\n     * Set up a struct for each player in the game\r\n     * Direction and Buttons contain the input from the devices\r\n     * The keys struct contains arrays of keyboard characters that will trigger the action\r\n     */\r\n    setupControls(numberOfButtons) {\r\n        numberOfButtons = numberOfButtons || 16;\r\n\r\n        let controls = this.getBaseControls();\r\n\r\n        // Add buttons\r\n        for (let i = 0; i <= numberOfButtons; i++) {\r\n            controls.buttons['B' + i] = 0;\r\n            controls.keys['B' + i] = [];\r\n        }\r\n\r\n        return controls;\r\n    }\r\n\r\n\r\n}\r\n","/**\r\n * Generic pad mapping\r\n */\r\nmodule.exports = {\r\n    padID: 'Generic',\r\n    padType: 'generic',\r\n    gamepadMapping: {\r\n        RC_S: 0,\r\n        RC_E: 1,\r\n        RC_W: 2,\r\n        RC_N: 3,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LT: 6,\r\n        RT: 7,\r\n        LS: 10,\r\n        RS: 11,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15\r\n    },\r\n}","/**\r\n * 081f-e401 - UnlicensedSNES\r\n */\r\nmodule.exports = {\r\n    padID: '081f-e401',\r\n    padType: 'snes',\r\n    gamepadMapping : {\r\n        RC_S: 2,\r\n        RC_E: 1,\r\n        RC_W: 3,\r\n        RC_N: 0,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15\r\n    }\r\n}","/**\r\n * Generic pad mapping\r\n */\r\nmodule.exports = {\r\n    padID: 'Xbox 360 controller (XInput STANDARD GAMEPAD)',\r\n    padType: 'xbox',\r\n    gamepadMapping: {\r\n        RC_S: 0,\r\n        RC_E: 1,\r\n        RC_W: 2,\r\n        RC_N: 3,\r\n        START: 9,\r\n        SELECT: 8,\r\n        LB: 4,\r\n        RB: 5,\r\n        LT: 6,\r\n        RT: 7,\r\n        LS: 10,\r\n        RS: 11,\r\n        LC_N: 12,\r\n        LC_S: 13,\r\n        LC_W: 14,\r\n        LC_E: 15,\r\n        MENU: 16\r\n    },\r\n}"],"sourceRoot":""}