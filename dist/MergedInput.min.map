{"version":3,"sources":["webpack://MergedInput/webpack/universalModuleDefinition","webpack://MergedInput/webpack/bootstrap","webpack://MergedInput/./main.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","m","MergedInput","Phaser","Plugins","ScenePlugin","this","gamepads","systems","input","gamepad","filter","el","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_step$value","_slicedToArray","value","index","err","return","eventEmitter","events","on","preupdate","postupdate","once","thisGamepad","refreshGamepads","setupGamepad","refreshPads","total","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","emit","gamepadButtonDown","gamepadButtonUp","keyboard","keyboardKeyDown","keyboardKeyUp","mouse","disableContextMenu","pointer","pointerMove","pointerDown","pointerUp","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","players","thisPlayer","BEARING","BEARING_DEGREES","ANGLE","direction","mapDirectionsToBearing","BEARING_LAST","DEGREES","parseFloat","mapBearingToDegrees","DEGREES_LAST","direction_secondary","checkKeyboardInput","checkGamepadInput","checkPointerInput","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","clearBuffer","interaction","pressed","buffer","released","device","id","player","action","addPlayer","_typeof","Number","isInteger","push","setupControls","length","key","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","thisKey","keys","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","controls","UP","DOWN","LEFT","RIGHT","TIMESTAMP","buttons","M1","M2","M3","M4","M5","position","i","last","lastPressed","lastReleased","arguments","append","includes","addKey","Input","Keyboard","KeyCodes","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_step9$value","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","thisValue","isDown","scene","sys","time","now","replace","event","keyCode","Object","find","playerIndex","getPlayerIndexFromKey","playerAction","getPlayerButtonFromKey","getPlayer","state","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_step11$value","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","pad","button","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","leftStick","y","Math","abs","up","down","x","left","right","rightStick","b","threshold","distance","getBearingFromAngle","angle","angleToPointer","Angle","Between","worldX","worldY","pointerDirection","pointerAngle","leftButtonDown","rightButtonDown","middleButtonDown","backButtonDown","forwardButtonDown","moveTime","leftButtonReleased","rightButtonReleased","middleButtonReleased","backButtonReleased","forwardButtonReleased","numDirections","snap_interval","PI2","angleSnap","Snap","To","angleSnapDeg","RadToDeg","bearings","bearing","thisDirection","toUpperCase","directions","_this2","shutdown","debug","axes","a","axis","getValue","ID","Index","Buttons","Axes","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","pluginManager","_classCallCheck","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","-180","-168.75","-157.5","-146.25","-135","-123.75","-112.5","-101.25","-90","-78.75","-67.5","-56.25","-45","-33.75","-22.5","-11.25","0","11.25","22.5","33.75","45","56.25","67.5","78.75","90","101.25","112.5","123.75","135","146.25","157.5","168.75","180","c","d","name","getter","o","defineProperty","enumerable","get","r","toStringTag","t","mode","__esModule","ns","create","bind","n","object","property","prototype","hasOwnProperty","p","s","moduleId","l","modules"],"mappings":"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","file":"MergedInput.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"MergedInput\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MergedInput\"] = factory();\n\telse\n\t\troot[\"MergedInput\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default class MergedInput extends Phaser.Plugins.ScenePlugin {\r\n\r\n\t/**\r\n\t * The Merged Input plugin is designed to run in the background and handle input.\r\n\t * Upon detecting a keypress or gamepad interaction, the plugin will update a player object and emit global events.\r\n\t *\r\n\t * @extends Phaser.Scene\r\n\t * @param {*} scene\r\n\t * @param {*} pluginManager\r\n\t */\r\n\tconstructor(scene, pluginManager) {\r\n\t\tsuper(scene, pluginManager);\r\n\t\tthis.scene = scene;\r\n\r\n\t\t// Players\r\n\t\tthis.players = [];\r\n\t\t// Gamepads\r\n\t\tthis.gamepads = [];\r\n\t\t// Keys object to store Phaser key objects. We'll check these during update\r\n\t\tthis.keys = {};\r\n\r\n\t\tthis.bearings = {\r\n\t\t\t'-180': 'W',\r\n\t\t\t'-168.75': 'WBN',\r\n\t\t\t'-157.5': 'WNW',\r\n\t\t\t'-146.25': 'NWBW',\r\n\t\t\t'-135': 'NW',\r\n\t\t\t'-123.75': 'NWBN',\r\n\t\t\t'-112.5': 'NNW',\r\n\t\t\t'-101.25': 'NBW',\r\n\t\t\t'-90': 'N',\r\n\t\t\t'-78.75': 'NBE',\r\n\t\t\t'-67.5': 'NNE',\r\n\t\t\t'-56.25': 'NEBN',\r\n\t\t\t'-45': 'NE',\r\n\t\t\t'-33.75': 'NEBE',\r\n\t\t\t'-22.5': 'EBE',\r\n\t\t\t'-11.25': 'EBN',\r\n\t\t\t'0': 'E',\r\n\t\t\t'11.25': 'EBS',\r\n\t\t\t'22.5': 'ESE',\r\n\t\t\t'33.75': 'SEBE',\r\n\t\t\t'45': 'SE',\r\n\t\t\t'56.25': 'SEBS',\r\n\t\t\t'67.5': 'SSE',\r\n\t\t\t'78.75': 'SBE',\r\n\t\t\t'90': 'S',\r\n\t\t\t'101.25': 'SBW',\r\n\t\t\t'112.5': 'SSW',\r\n\t\t\t'123.75': 'SWBS',\r\n\t\t\t'135': 'SW',\r\n\t\t\t'146.25': 'SWBW',\r\n\t\t\t'157.5': 'WSW',\r\n\t\t\t'168.75': 'WBS',\r\n\t\t\t'180': 'W'\r\n\t\t};\r\n\t}\r\n\r\n\trefreshGamepads() {\r\n\t\t// Sometimes, gamepads are undefined. For some reason.\r\n\t\tthis.gamepads = this.systems.input.gamepad.gamepads.filter(function (el) {\r\n\t\t\treturn el != null;\r\n\t\t});\r\n\r\n\t\tfor (const [index, thisGamepad] of this.gamepads.entries()) {\r\n\t\t\tthisGamepad.index = index; // Overwrite the gamepad index, in case we had undefined gamepads earlier\r\n\t\t}\r\n\t}\r\n\r\n\tboot() {\r\n\t\tthis.eventEmitter = this.systems.events;\r\n\t\tthis.eventEmitter.on('preupdate', this.preupdate, this);\r\n\t\tthis.eventEmitter.on('postupdate', this.postupdate, this);\r\n\r\n\t\t// Gamepad\r\n\t\tif (typeof this.systems.input.gamepad !== 'undefined') {\r\n\t\t\tthis.systems.input.gamepad.once('connected', function (thisGamepad) {\r\n\t\t\t\tthis.refreshGamepads();\r\n\t\t\t\tthis.setupGamepad(thisGamepad)\r\n\t\t\t}, this);\r\n\r\n\t\t\t// Check to see if the gamepad has already been setup by the browser\r\n\t\t\tthis.systems.input.gamepad.refreshPads();\r\n\t\t\tif (this.systems.input.gamepad.total) {\r\n\t\t\t\tthis.refreshGamepads();\r\n\t\t\t\tfor (const thisGamepad of this.gamepads) {\r\n\t\t\t\t\tthis.systems.input.gamepad.emit('connected', thisGamepad);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.systems.input.gamepad.on('down', this.gamepadButtonDown, this);\r\n\t\t\tthis.systems.input.gamepad.on('up', this.gamepadButtonUp, this);\r\n\t\t}\r\n\r\n\t\t// Keyboard\r\n\t\tthis.systems.input.keyboard.on('keydown', this.keyboardKeyDown, this);\r\n\t\tthis.systems.input.keyboard.on('keyup', this.keyboardKeyUp, this);\r\n\r\n\r\n\t\t// Pointer\r\n\t\tthis.systems.input.mouse.disableContextMenu();\r\n\r\n\t\tthis.systems.input.on('pointermove', function (pointer) {\r\n\t\t\tthis.pointerMove(pointer);\r\n\t\t}, this);\r\n\r\n\t\tthis.systems.input.on('pointerdown', function (pointer) {\r\n\t\t\tthis.pointerDown(pointer);\r\n\t\t}, this);\r\n\r\n\t\tthis.systems.input.on('pointerup', function (pointer) {\r\n\t\t\tthis.pointerUp(pointer);\r\n\t\t}, this);\r\n\t}\r\n\r\n\tpreupdate() {\r\n\t\t// Loop through players and handle input\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// If the pointer hasn't moved, and the scene has changed, this can end up as undefined\r\n\t\t\tthisPlayer.pointer.BEARING = typeof thisPlayer.pointer.BEARING != 'undefined' ? thisPlayer.pointer.BEARING : '';\r\n\t\t\tthisPlayer.pointer.BEARING_DEGREES = typeof thisPlayer.pointer.BEARING_DEGREES != 'undefined' ? thisPlayer.pointer.BEARING_DEGREES : 0;\r\n\t\t\tthisPlayer.pointer.ANGLE = typeof thisPlayer.pointer.ANGLE != 'undefined' ? thisPlayer.pointer.ANGLE : '';\r\n\r\n\r\n\t\t\tthisPlayer.direction.BEARING = this.mapDirectionsToBearing(thisPlayer.direction);\r\n\t\t\tthisPlayer.direction.BEARING_LAST = thisPlayer.direction.BEARING != '' ? thisPlayer.direction.BEARING : thisPlayer.direction.BEARING_LAST;\r\n\t\t\tthisPlayer.direction.DEGREES = thisPlayer.direction.BEARING != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction.BEARING)) : 0;\r\n\t\t\tthisPlayer.direction.DEGREES_LAST = thisPlayer.direction.BEARING_LAST != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction.BEARING_LAST)) : 0;\r\n\t\t\tthisPlayer.direction_secondary.BEARING = this.mapDirectionsToBearing(thisPlayer.direction_secondary);\r\n\t\t\tthisPlayer.direction_secondary.BEARING_LAST = thisPlayer.direction_secondary.BEARING != '' ? thisPlayer.direction_secondary.BEARING : thisPlayer.direction_secondary.BEARING_LAST;\r\n\t\t\tthisPlayer.direction_secondary.DEGREES = thisPlayer.direction_secondary.BEARING != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction_secondary.BEARING)) : 0;\r\n\t\t\tthisPlayer.direction_secondary.DEGREES_LAST = thisPlayer.direction_secondary.BEARING_LAST != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction_secondary.BEARING_LAST)) : 0;\r\n\t\t}\r\n\r\n\t\tthis.checkKeyboardInput();\r\n\t\tthis.checkGamepadInput();\r\n\t\tthis.checkPointerInput();\r\n\t}\r\n\r\n\tpostupdate() {\r\n\t\t// Loop through players and manage buffered input\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Clear the interaction buffer\r\n\t\t\tthis.clearBuffer(thisPlayer);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clear the interaction buffer for the given player\r\n\t * @param {*} thisPlayer \r\n\t */\r\n\tclearBuffer(thisPlayer) {\r\n\t\tif (thisPlayer.interaction.pressed != '') {\r\n\t\t\tthisPlayer.interaction.buffer = '';\r\n\t\t}\r\n\t\tif (thisPlayer.interaction.buffer == '') {\r\n\t\t\tthisPlayer.interaction.pressed = '';\r\n\t\t\tthisPlayer.interaction.released = '';\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set up the gamepad and associate with a player object\r\n\t */\r\n\tsetupGamepad(thisGamepad) {\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', id: thisGamepad.id, player: thisGamepad.index, action: 'Connected' });\r\n\r\n\t\tif (typeof this.players[thisGamepad.index] === 'undefined') {\r\n\t\t\tthis.addPlayer();\r\n\t\t}\r\n\t\tthis.players[thisGamepad.index].gamepad = thisGamepad;\r\n\t}\r\n\r\n\t/**\r\n\t * Add a new player object to the players array\r\n\t * @param {number} index Player index - if a player object at this index already exists, it will be returned instead of creating a new player object\r\n\t */\r\n\taddPlayer(index) {\r\n\t\tif (typeof Number.isInteger(index) && typeof this.players[index] !== 'undefined') {\r\n\t\t\treturn this.players[index];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.players.push(this.setupControls());\r\n\t\t\tthis.players[this.players.length - 1].index = this.players.length - 1;\r\n\t\t\treturn this.players[this.players.length - 1];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get player object\r\n\t * @param {number} index Player index\r\n\t */\r\n\tgetPlayer(index) {\r\n\t\treturn typeof this.players[index] !== 'undefined' ? this.players[index] : ''\r\n\t}\r\n\r\n\tgetPlayerIndexFromKey(key) {\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\tif (thisValue == key) {\r\n\t\t\t\t\t\treturn thisPlayer.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tgetPlayerButtonFromKey(key) {\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\tif (thisValue == key) {\r\n\t\t\t\t\t\treturn thisKey;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a struct to hold input control information\r\n\t * Set up a struct for each player in the game\r\n\t * Direction and Buttons contain the input from the devices\r\n\t * The keys struct contains arrays of keyboard characters that will trigger the action\r\n\t */\r\n\tsetupControls() {\r\n\t\tlet controls = {\r\n\t\t\t'direction': {\r\n\t\t\t\t'UP': 0,\r\n\t\t\t\t'DOWN': 0,\r\n\t\t\t\t'LEFT': 0,\r\n\t\t\t\t'RIGHT': 0,\r\n\t\t\t\t'BEARING': '',\r\n\t\t\t\t'BEARING_LAST': '',\r\n\t\t\t\t'DEGREES': 0,\r\n\t\t\t\t'DEGREES_LAST': 0,\r\n\t\t\t\t'TIMESTAMP': 0\r\n\t\t\t},\r\n\t\t\t'direction_secondary': {\r\n\t\t\t\t'UP': 0,\r\n\t\t\t\t'DOWN': 0,\r\n\t\t\t\t'LEFT': 0,\r\n\t\t\t\t'RIGHT': 0,\r\n\t\t\t\t'BEARING': '',\r\n\t\t\t\t'DEGREES': 0,\r\n\t\t\t\t'BEARING_LAST': '',\r\n\t\t\t\t'DEGREES_LAST': 0,\r\n\t\t\t\t'TIMESTAMP': 0\r\n\t\t\t},\r\n\t\t\t'buttons': {},\r\n\t\t\t'pointer': {\r\n\t\t\t\t'M1': 0,\r\n\t\t\t\t'M2': 0,\r\n\t\t\t\t'M3': 0,\r\n\t\t\t\t'M4': 0,\r\n\t\t\t\t'M5': 0,\r\n\t\t\t\t'BEARING': '',\r\n\t\t\t\t'BEARING_DEGREES': 0,\r\n\t\t\t\t'ANGLE': 0,\r\n\t\t\t\t'TIMESTAMP': 0\r\n\t\t\t},\r\n\t\t\t'position': {},\r\n\t\t\t'interaction': {},\r\n\t\t\t'gamepad': {},\r\n\t\t\t'keys': {\r\n\t\t\t\t'UP': [],\r\n\t\t\t\t'DOWN': [],\r\n\t\t\t\t'LEFT': [],\r\n\t\t\t\t'RIGHT': [],\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i = 1; i <= 16; i++) {\r\n\t\t\tcontrols.buttons['B' + i] = 0;\r\n\t\t\tcontrols.keys['B' + i] = [];\r\n\t\t}\r\n\r\n\t\tcontrols.interaction.buffer = '';\r\n\t\tcontrols.interaction.pressed = '';\r\n\t\tcontrols.interaction.released = '';\r\n\t\tcontrols.interaction.last = '';\r\n\t\tcontrols.interaction.lastPressed = '';\r\n\t\tcontrols.interaction.lastReleased = '';\r\n\t\tcontrols.interaction.device = '';\r\n\r\n\t\treturn controls;\r\n\t}\r\n\r\n\t// Keyboard functions\r\n\r\n\t/**\r\n\t * Define a key for a player/action combination\r\n\t * @param {number} player The player on which we're defining a key\r\n\t * @param {string} action The action to define\r\n\t * @param {string} value The key to use\r\n\t * @param {boolean} append When true, this key definition will be appended to the existing key(s) for this action\r\n\t */\r\n\tdefineKey(player = 0, action, value, append = false) {\r\n\t\t// Set up a new player if none defined\r\n\t\tif (typeof this.players[player] === 'undefined') {\r\n\t\t\tthis.addPlayer();\r\n\t\t}\r\n\r\n\t\tif (['UP', 'DOWN', 'LEFT', 'RIGHT', 'ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT', 'B0', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10', 'B11', 'B12', 'B13', 'B14', 'B15', 'B16'].includes(action)) {\r\n\t\t\tif (append && (typeof this.players[player].keys[action] !== 'undefined')) {\r\n\t\t\t\tthis.players[player].keys[action].push([value]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[player].keys[action] = [];\r\n\t\t\t\tthis.players[player].keys[action].push([value]);\r\n\t\t\t}\r\n\r\n\t\t\tthis.keys[[value]] = this.systems.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes[value]);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Iterate through players and check for interaction with defined keys\r\n\t */\r\n\tcheckKeyboardInput() {\r\n\t\t// Loop through players and check for keypresses - use of 'entries()' gives us an index to use for the player\r\n\t\tfor (let [playerIndex, thisPlayer] of this.players.entries()) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tlet action = 0;\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\r\n\t\t\t\t\t// Check if the key is down\r\n\t\t\t\t\taction = (this.keys[thisValue].isDown) ? 1 : action;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set the action in the player object\r\n\t\t\t\tif (['UP', 'DOWN', 'LEFT', 'RIGHT'].includes(thisKey)) {\r\n\t\t\t\t\tthisPlayer.direction[thisKey] = action;\r\n\t\t\t\t\tthisPlayer.direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t}\r\n\t\t\t\telse if (['ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT'].includes(thisKey)) {\r\n\t\t\t\t\tthisPlayer.direction_secondary[thisKey.replace('ALT_', '')] = action;\r\n\t\t\t\t\tif (action == 1) {\r\n\t\t\t\t\t\tthisPlayer.direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthisPlayer.buttons[thisKey] = action;\r\n\t\t\t\t\tif (action == 1) {\r\n\t\t\t\t\t\tthisPlayer.buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set the latest interaction flag\r\n\t\t\t\tif (action == 1) {\r\n\t\t\t\t\tthisPlayer.interaction.device = 'keyboard';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a keyboard button is pressed down, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the key, and passes a mapped action and value\r\n\t */\r\n\tkeyboardKeyDown(event) {\r\n\t\tlet keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\r\n\t\tlet playerIndex = this.getPlayerIndexFromKey(keyCode);\r\n\t\tlet playerAction = this.getPlayerButtonFromKey(keyCode);\r\n\r\n\t\tif (playerIndex > -1 && playerAction != '') {\r\n\t\t\tlet thisPlayer = this.getPlayer(playerIndex);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'keyboard', value: 1, player: playerIndex, action: keyCode, state: 'DOWN' });\r\n\r\n\t\t\tthisPlayer.interaction.device = 'keyboard';\r\n\t\t\tthisPlayer.interaction.pressed = playerAction;\r\n\t\t\tthisPlayer.interaction.buffer = playerAction;\r\n\t\t\tthisPlayer.interaction.last = playerAction;\r\n\t\t\tthisPlayer.interaction.lastPressed = playerAction;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a keyboard button is released, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the key, and passes a mapped action and value\r\n\t */\r\n\tkeyboardKeyUp(event) {\r\n\t\tlet keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\r\n\t\tlet playerIndex = this.getPlayerIndexFromKey(keyCode);\r\n\t\tlet playerAction = this.getPlayerButtonFromKey(keyCode);\r\n\r\n\t\tif (playerIndex > -1 && playerAction != '') {\r\n\t\t\tlet thisPlayer = this.getPlayer(playerIndex);\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'keyboard', value: 1, player: playerIndex, action: keyCode, state: 'DOWN' });\r\n\r\n\t\t\tthisPlayer.interaction.device = 'keyboard';\r\n\t\t\tthisPlayer.interaction.released = playerAction;\r\n\t\t\tthisPlayer.interaction.lastReleased = playerAction;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Iterate through players and check for interaction with defined pointer buttons\r\n\t */\r\n\tcheckPointerInput() {\r\n\t\t// Loop through players and check for button presses - use of 'entries()' gives us an index to use for the player\r\n\t\tfor (let [playerIndex, thisPlayer] of this.players.entries()) {\r\n\t\t\t// Loop through all the keys assigned to this player\r\n\t\t\tfor (var thisKey in thisPlayer.keys) {\r\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) { // Each definition for this key action\r\n\t\t\t\t\tif (['M1', 'M2', 'M3', 'M4', 'M5'].includes(thisValue[0])) {\r\n\t\t\t\t\t\t// Check to see if button is pressed (stored in P1, can't have two mice...)\r\n\t\t\t\t\t\tif (this.players[0].pointer[thisValue] == 1) {\r\n\t\t\t\t\t\t\tthisPlayer.buttons[thisKey] = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// Gamepad functions\r\n\r\n\t/**\r\n\t * When a gamepad button is pressed down, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\r\n\t * @param {number} index Button index\r\n\t * @param {number} value Button value\r\n\t * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\r\n\t */\r\n\tgamepadButtonDown(pad, button, value) {\r\n\t\tthis.players[pad.index].interaction.device = 'gamepad';\r\n\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: value, player: pad.index, action: 'B' + button.index, state: 'DOWN' });\r\n\r\n\t\t// DPad mapping\r\n\t\tif (button.index === 12) {\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'UP', state: 'DOWN' });\r\n\t\t\tthis.players[pad.index].interaction.pressed = 'UP';\r\n\t\t\tthis.players[pad.index].interaction.last = 'UP';\r\n\t\t\tthis.players[pad.index].interaction.lastPressed = 'UP';\r\n\t\t\tthis.players[pad.index].interaction.buffer = 'UP';\r\n\t\t}\r\n\t\tif (button.index === 13) {\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'DOWN', state: 'DOWN' });\r\n\t\t\tthis.players[pad.index].interaction.pressed = 'DOWN';\r\n\t\t\tthis.players[pad.index].interaction.last = 'DOWN';\r\n\t\t\tthis.players[pad.index].interaction.lastPressed = 'DOWN';\r\n\t\t\tthis.players[pad.index].interaction.buffer = 'DOWN';\r\n\t\t}\r\n\t\tif (button.index === 14) {\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'LEFT', state: 'DOWN' });\r\n\t\t\tthis.players[pad.index].interaction.pressed = 'LEFT';\r\n\t\t\tthis.players[pad.index].interaction.last = 'LEFT';\r\n\t\t\tthis.players[pad.index].interaction.lastPressed = 'LEFT';\r\n\t\t\tthis.players[pad.index].interaction.buffer = 'LEFT';\r\n\t\t}\r\n\t\tif (button.index === 15) {\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'RIGHT', state: 'DOWN' });\r\n\t\t\tthis.players[pad.index].interaction.pressed = 'RIGHT';\r\n\t\t\tthis.players[pad.index].interaction.last = 'RIGHT';\r\n\t\t\tthis.players[pad.index].interaction.lastPressed = 'RIGHT';\r\n\t\t\tthis.players[pad.index].interaction.buffer = 'RIGHT';\r\n\t\t}\r\n\r\n\t\t// Last button pressed\r\n\t\tif (![12, 13, 14, 15].includes(button.index)) {\r\n\t\t\t// Update the last button state\r\n\t\t\tthis.players[pad.index].interaction.pressed = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.last = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.lastPressed = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.buffer = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.players[pad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When a gamepad button is released, this function will emit a mergedInput event in the global registry.\r\n\t * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\r\n\t * @param {number} index Button index\r\n\t * @param {number} value Button value\r\n\t * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\r\n\t */\r\n\tgamepadButtonUp(pad, button, value) {\r\n\t\tthis.players[pad.index].interaction.device = 'gamepad';\r\n\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: value, player: pad.index, action: 'B' + button.index, state: 'UP' });\r\n\t\t// DPad mapping\r\n\t\tif (button.index === 12) {\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'UP', state: 'UP' });\r\n\t\t\tthis.players[pad.index].interaction.released = 'UP';\r\n\t\t\tthis.players[pad.index].interaction.lastReleased = 'UP';\r\n\t\t}\r\n\t\tif (button.index === 13) {\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'DOWN', state: 'UP' });\r\n\t\t\tthis.players[pad.index].interaction.released = 'DOWN';\r\n\t\t\tthis.players[pad.index].interaction.lastReleased = 'DOWN';\r\n\t\t}\r\n\t\tif (button.index === 14) {\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'LEFT', state: 'UP' });\r\n\t\t\tthis.players[pad.index].interaction.released = 'LEFT';\r\n\t\t\tthis.players[pad.index].interaction.lastReleased = 'LEFT';\r\n\t\t}\r\n\t\tif (button.index === 15) {\r\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'RIGHT', state: 'UP' });\r\n\t\t\tthis.players[pad.index].interaction.released = 'RIGHT';\r\n\t\t\tthis.players[pad.index].interaction.lastReleased = 'RIGHT';\r\n\t\t}\r\n\r\n\t\tif (![12, 13, 14, 15].includes(button.index)) {\r\n\t\t\t// Update the last button state\r\n\t\t\tthis.players[pad.index].interaction.released = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].interaction.lastReleased = 'B' + button.index;\r\n\t\t\tthis.players[pad.index].buttons.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.players[pad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Iterate through gamepads and handle interactions\r\n\t */\r\n\tcheckGamepadInput() {\r\n\t\t// Check for gamepad input\r\n\t\tfor (var thisGamepad of this.gamepads) {\r\n\r\n\t\t\t// Set up a player if we don't have one, presumably due to race conditions in detecting gamepads\r\n\t\t\tif (typeof this.players[thisGamepad.index] === 'undefined') {\r\n\t\t\t\tthis.addPlayer();\r\n\t\t\t}\r\n\r\n\t\t\t// Directions\r\n\t\t\tif (thisGamepad.leftStick.y < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.UP = Math.abs(thisGamepad.leftStick.y)\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.leftStick.y > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.DOWN = thisGamepad.leftStick.y\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// DPad\r\n\t\t\t\tthis.players[thisGamepad.index].direction.UP = thisGamepad.up ? 1 : 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction.DOWN = thisGamepad.down ? 1 : 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (thisGamepad.leftStick.x < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.LEFT = Math.abs(thisGamepad.leftStick.x)\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.leftStick.x > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction.RIGHT = thisGamepad.leftStick.x\r\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// DPad\r\n\t\t\t\tthis.players[thisGamepad.index].direction.LEFT = thisGamepad.left ? 1 : 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction.RIGHT = thisGamepad.right ? 1 : 0;\r\n\t\t\t}\r\n\r\n\t\t\t// Secondary\r\n\t\t\tif (thisGamepad.rightStick.y < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.UP = Math.abs(thisGamepad.rightStick.y)\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.rightStick.y > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.DOWN = thisGamepad.rightStick.y\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.UP = 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.DOWN = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (thisGamepad.rightStick.x < -0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.LEFT = Math.abs(thisGamepad.rightStick.x)\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse if (thisGamepad.rightStick.x > 0.5) {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.RIGHT = thisGamepad.rightStick.x\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.LEFT = 0;\r\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.RIGHT = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.players[thisGamepad.index].interaction.device === 'gamepad') {\r\n\t\t\t\t// Buttons\r\n\r\n\t\t\t\tfor (var b = 0; b < thisGamepad.buttons.length; b++) {\r\n\t\t\t\t\tlet button = thisGamepad.buttons[b];\r\n\t\t\t\t\tthis.players[thisGamepad.index].buttons['B' + b] = button.value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer move.\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerMove(pointer, threshold) {\r\n\t\tvar threshold = threshold || 0;\r\n\t\tif (pointer.distance > threshold) {\r\n\t\t\tlet pointerDirection = this.getBearingFromAngle(pointer.angle, 8);\r\n\t\t\t// this.players[0].direction_secondary = this.mapBearingToDirections(pointerDirection);\r\n\r\n\t\t\t// If we've been given a player position, return bearings and angles\r\n\t\t\tif (typeof this.players[0] !== 'undefined' && this.players[0].position.x !== 'undefined') {\r\n\t\t\t\tlet position = this.players[0].position;\r\n\t\t\t\tlet angleToPointer = Phaser.Math.Angle.Between(position.x, position.y, pointer.worldX, pointer.worldY);\r\n\t\t\t\tlet pointerDirection = this.getBearingFromAngle(angleToPointer, 8);\r\n\t\t\t\tlet pointerAngle = Number(this.mapBearingToDegrees(pointerDirection));\r\n\r\n\t\t\t\tthis.players[0].pointer.BEARING = pointerDirection;\r\n\t\t\t\tthis.players[0].pointer.ANGLE = angleToPointer;\r\n\t\t\t\tthis.players[0].pointer.BEARING_DEGREES = pointerAngle;\r\n\t\t\t\tthis.players[0].pointer.TIMESTAMP = this.scene.sys.time.now;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer down. Indicates that Mx has been pressed, which should be listened to by the player object\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerDown(pointer) {\r\n\t\tlet action = '';\r\n\t\tthis.players[0].interaction.device = 'pointer';\r\n\t\tif (pointer.leftButtonDown()) {\r\n\t\t\taction = 'M1';\r\n\t\t}\r\n\t\tif (pointer.rightButtonDown()) {\r\n\t\t\taction = 'M2';\r\n\t\t}\r\n\t\tif (pointer.middleButtonDown()) {\r\n\t\t\taction = 'M3';\r\n\t\t}\r\n\t\tif (pointer.backButtonDown()) {\r\n\t\t\taction = 'M4';\r\n\t\t}\r\n\t\tif (pointer.forwardButtonDown()) {\r\n\t\t\taction = 'M5';\r\n\t\t}\r\n\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'pointer', value: 1, player: 0, action: action, state: 'DOWN' });\r\n\r\n\t\tthis.players[0].pointer[action] = 1;\r\n\r\n\t\t// Update the last button state\r\n\t\tthis.players[0].interaction.pressed = action;\r\n\t\tthis.players[0].interaction.last = action;\r\n\t\tthis.players[0].interaction.lastPressed = action;\r\n\t\tthis.players[0].interaction.buffer = action;\r\n\t\tthis.players[0].pointer.TIMESTAMP = pointer.moveTime;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Function to run on pointer up. Indicates that Mx has been released, which should be listened to by the player object\r\n\t * @param {*} pointer - The pointer object\r\n\t */\r\n\tpointerUp(pointer) {\r\n\t\tlet action = '';\r\n\t\tif (pointer.leftButtonReleased()) {\r\n\t\t\taction = 'M1';\r\n\t\t}\r\n\t\tif (pointer.rightButtonReleased()) {\r\n\t\t\taction = 'M2';\r\n\t\t}\r\n\t\tif (pointer.middleButtonReleased()) {\r\n\t\t\taction = 'M3';\r\n\t\t}\r\n\t\tif (pointer.backButtonReleased()) {\r\n\t\t\taction = 'M4';\r\n\t\t}\r\n\t\tif (pointer.forwardButtonReleased()) {\r\n\t\t\taction = 'M5';\r\n\t\t}\r\n\r\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'pointer', value: 1, player: 0, action: action, state: 'UP' });\r\n\r\n\t\tthis.players[0].pointer[action] = 0;\r\n\t\tthis.players[0].interaction.released = action;\r\n\t\tthis.players[0].interaction.lastReleased = action;\r\n\t\tthis.players[0].pointer.TIMESTAMP = this.scene.sys.time.now;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Get the bearing from a given angle\r\n\t * @param {float} angle - Angle to use\r\n\t * @param {number} numDirections - Number of possible directions (e.g. 4 for N/S/E/W)\r\n\t */\r\n\tgetBearingFromAngle(angle, numDirections, threshold) {\r\n\t\tvar numDirections = numDirections || 8;\r\n\r\n\t\tvar snap_interval = Phaser.Math.PI2 / numDirections;\r\n\r\n\t\tvar angleSnap = Phaser.Math.Snap.To(angle, snap_interval);\r\n\t\tvar angleSnapDeg = Phaser.Math.RadToDeg(angleSnap);\r\n\t\tvar angleSnapDir = this.bearings[angleSnapDeg];\r\n\r\n\t\treturn angleSnapDir;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Given a bearing, return a direction object containing boolean flags for the four directions\r\n\t * @param {*} bearing\r\n\t */\r\n\tmapBearingToDirections(bearing) {\r\n\t\tlet thisDirection = {\r\n\t\t\t'UP': 0,\r\n\t\t\t'DOWN': 0,\r\n\t\t\t'LEFT': 0,\r\n\t\t\t'RIGHT': 0,\r\n\t\t\t'BEARING': bearing.toUpperCase()\r\n\t\t}\r\n\r\n\t\tif (bearing.toUpperCase().includes('W')) {\r\n\t\t\tthisDirection.LEFT = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('E')) {\r\n\t\t\tthisDirection.RIGHT = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('S')) {\r\n\t\t\tthisDirection.DOWN = 1;\r\n\t\t}\r\n\t\tif (bearing.toUpperCase().includes('N')) {\r\n\t\t\tthisDirection.UP = 1;\r\n\t\t}\r\n\r\n\t\treturn thisDirection;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Given a directions object, return the applicable bearing (8 way only)\r\n\t * @param {*} directions\r\n\t */\r\n\tmapDirectionsToBearing(directions, threshold) {\r\n\t\tvar threshold = threshold || -.5\r\n\t\tif (directions.UP && !(directions.LEFT || directions.RIGHT)) {\r\n\t\t\treturn 'N';\r\n\t\t}\r\n\t\tif (directions.RIGHT && directions.UP) {\r\n\t\t\treturn 'NE';\r\n\t\t}\r\n\t\tif (directions.RIGHT && !(directions.UP || directions.DOWN)) {\r\n\t\t\treturn 'E';\r\n\t\t}\r\n\t\tif (directions.RIGHT && directions.DOWN) {\r\n\t\t\treturn 'SE';\r\n\t\t}\r\n\t\tif (directions.DOWN && !(directions.LEFT || directions.RIGHT)) {\r\n\t\t\treturn 'S';\r\n\t\t}\r\n\t\tif (directions.LEFT && directions.DOWN) {\r\n\t\t\treturn 'SW';\r\n\t\t}\r\n\t\tif (directions.LEFT && !(directions.UP || directions.DOWN)) {\r\n\t\t\treturn 'W';\r\n\t\t}\r\n\t\tif (directions.LEFT && directions.UP) {\r\n\t\t\treturn 'NW';\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\r\n\t/**\r\n\t * Given a bearing, return the snapped angle in degrees\r\n\t * @param {*} bearing\r\n\t */\r\n\tmapBearingToDegrees(bearing) {\r\n\t\tif (bearing != '') {\r\n\t\t\treturn Object.keys(this.bearings).find(key => this.bearings[key] === bearing);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn '';\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tdestroy() {\r\n\t\tthis.shutdown();\r\n\t\tthis.scene = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Return debug object\r\n\t */\r\n\tdebug() {\r\n\t\t// Debug variables\r\n\t\tvar debug = {\r\n\t\t\t'input': {}\r\n\t\t};\r\n\t\tdebug.input.gamepads = [];\r\n\t\tfor (var i = 0; i < this.gamepads.length; i++) {\r\n\t\t\tlet pad = this.gamepads[i];\r\n\t\t\tlet buttons = {};\r\n\t\t\tlet axes = {};\r\n\r\n\t\t\tfor (var b = 0; b < pad.buttons.length; b++) {\r\n\t\t\t\tlet button = pad.buttons[b];\r\n\t\t\t\tbuttons['B' + button.index] = button.value;\r\n\t\t\t}\r\n\r\n\t\t\tfor (var a = 0; a < pad.axes.length; a++) {\r\n\t\t\t\tlet axis = pad.axes[a];\r\n\t\t\t\taxes['A' + axis.index] = axis.getValue();\r\n\t\t\t}\r\n\r\n\t\t\tdebug.input.gamepads.push({\r\n\t\t\t\t'ID': pad.id,\r\n\t\t\t\t'Index': pad.index,\r\n\t\t\t\t'Buttons': buttons,\r\n\t\t\t\t'Axes': axes\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tdebug.players = [];\r\n\t\tfor (let thisPlayer of this.players) {\r\n\t\t\tdebug.players.push({\r\n\t\t\t\t'interaction': thisPlayer.interaction,\r\n\t\t\t\t'device': thisPlayer.device,\r\n\t\t\t\t'buttons': thisPlayer.buttons,\r\n\t\t\t\t'pointer': thisPlayer.pointer,\r\n\t\t\t\t'direction': thisPlayer.direction,\r\n\t\t\t\t'direction_secondary': thisPlayer.direction_secondary,\r\n\t\t\t\t'keys': thisPlayer.keys\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn debug;\r\n\t}\r\n}\r\n"],"sourceRoot":""}